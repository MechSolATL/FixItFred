@page
@model MVP_Core.Pages.Technician.TrainingCenterModel
@inject SkillsTrackerService SkillsService
@inject MVP_Core.Services.CertificationService CertService
<div class="offline-banner" style="display:none;"></div>
<main role="main" tabindex="-1" aria-label="Technician Training Center Main Content">
@{
    ViewData["Title"] = "Training Center";
    int techId = User.Identity.IsAuthenticated ? int.Parse(User.Identity.Name) : 0; // Assumes techId is username
    var assignedTracks = Model.AssignedTracks;
    var progress = Model.Progress;
    var certs = Model.Certs;
}
<h2>Training Center</h2>
<section aria-label="Assigned Skill Tracks" class="mb-4 grid grid-cols-1 md:grid-cols-2">
    <h4>Assigned Skill Tracks</h4>
    <ul>
    @foreach (var track in assignedTracks)
    {
        var prog = progress.FirstOrDefault(p => p.SkillTrackId == track.Id);
        <li style="min-height:44px;" tabindex="0" aria-label="Skill Track @track.Name">
            <b>@track.Name</b> - @track.Description
            <span class="badge bg-@(prog?.Status == "Completed" ? "success" : "warning")">@prog?.Status ?? "Assigned"</span>
            @if (prog?.Status != "Completed")
            {
                <form method="post" asp-page-handler="CompleteTrackAsync" role="form" aria-label="Mark @track.Name Complete">
                    <input type="hidden" name="trackId" value="@track.Id" />
                    <button type="submit" class="btn btn-sm btn-primary" style="min-height:44px;" aria-label="Mark Complete">Mark Complete</button>
                </form>
            }
        </li>
    }
    </ul>
</section>
<section aria-label="Upload Certification" class="mb-4">
    <h4>Upload Certification</h4>
    <form method="post" enctype="multipart/form-data" asp-page-handler="UploadCertAsync" role="form" aria-label="Upload Certification">
        <input type="file" name="certFile" class="form-control mb-2" aria-label="Certification File Upload" style="min-height:44px;" />
        <button type="submit" class="btn btn-success" style="min-height:44px;" aria-label="Upload Certification">Upload</button>
    </form>
</section>
<section aria-label="My Certifications" class="mb-4 grid grid-cols-1 md:grid-cols-2">
    <h4>My Certifications</h4>
    <ul>
    @foreach (var cert in certs)
    {
        string badgeIcon = cert.IsVerified && !cert.IsExpired ? "fa-check-circle text-success" :
                           (!cert.IsExpired && cert.DaysUntilExpiry <= 30 ? "fa-exclamation-circle text-warning" :
                           cert.IsExpired ? "fa-times-circle text-danger" : "fa-question-circle text-secondary");
        string badgeTooltip = cert.IsVerified && !cert.IsExpired ? "Verified & Valid" :
                              (!cert.IsExpired && cert.DaysUntilExpiry <= 30 ? $"Expiring in {cert.DaysUntilExpiry} days" :
                              cert.IsExpired ? "Expired" : "Pending Verification");
        <li style="min-height:44px;" tabindex="0" aria-label="Certification @cert.CertificationName">
            <b>@cert.CertificationName</b>
            <i class="fas @badgeIcon" title="@badgeTooltip" aria-label="@badgeTooltip"></i>
            - Expiry: @(cert.ExpiryDate?.ToString("d") ?? "N/A")
            <span title="@badgeTooltip">@((cert.DaysUntilExpiry < int.MaxValue && !cert.IsExpired) ? $"({cert.DaysUntilExpiry} days left)" : "")</span>
            <span class="badge bg-@(cert.VerificationStatus == "Verified" ? "success" : cert.VerificationStatus == "Expired" ? "danger" : cert.DaysUntilExpiry <= 30 ? "warning" : "secondary")">@cert.VerificationStatus</span>
            @if (!string.IsNullOrEmpty(cert.DocumentPath))
            {
                <a href="@cert.DocumentPath" target="_blank" aria-label="View Certification Document">View</a>
            }
        </li>
    }
    </ul>
</section>
<section aria-label="Pending Sync Queue" class="mb-4">
    <h4>Pending Sync Actions</h4>
    <div id="syncQueueStatus" class="mb-2">
        <span id="queueSize" class="badge bg-info">0</span> actions pending
    </div>
    <ul id="pendingActionsList"></ul>
    <button id="forceSyncBtn" class="btn btn-primary" style="display:none;min-height:44px;" aria-label="Force Sync Now">Force Sync Now</button>
</section>
@if (SkillsService.IsEligibleForBadge(techId))
{
    <div class="alert alert-info" role="alert">Congratulations! You have completed all required skill tracks and earned a badge.</div>
}
<section aria-label="High Contrast Toggle" class="mt-3">
    <label for="contrastToggleTech" class="form-label">High Contrast Mode</label>
    <input type="checkbox" id="contrastToggleTech" aria-label="Toggle high contrast" tabindex="0" style="width:44px;height:44px;" onclick="document.body.classList.toggle('high-contrast')" />
</section>
<script src="https://kit.fontawesome.com/7c3b9e2e2a.js" crossorigin="anonymous"></script>
<script src="~/js/ConnectivityMonitor.js"></script>
<style>
@@media (max-width: 768px) {
    .grid-cols-2 { grid-template-columns: 1fr !important; }
}
.high-contrast, .high-contrast * {
    background: #000 !important;
    color: #fff !important;
    border-color: #fff !important;
}
</style>
<script>
document.addEventListener('keydown', function(e) {
    if (e.key === 'Tab') {
        document.body.classList.add('user-is-tabbing');
    }
});
// --- Sprint 67.2: Sync Queue Visualization + Manual Retry Logic ---
function getPendingActions() {
    let queue = [];
    try {
        queue = JSON.parse(localStorage.getItem('pendingSyncQueue') || '[]');
    } catch { queue = []; }
    return queue;
}
function updateQueueDisplay() {
    const queue = getPendingActions();
    document.getElementById('queueSize').textContent = queue.length;
    const list = document.getElementById('pendingActionsList');
    list.innerHTML = '';
    if (queue.length === 0) {
        list.innerHTML = '<li>No pending actions.</li>';
        document.getElementById('forceSyncBtn').style.display = 'none';
    } else {
        queue.forEach((action, idx) => {
            const li = document.createElement('li');
            li.textContent = `${action.type || 'Action'}: ${action.description || JSON.stringify(action)}`;
            list.appendChild(li);
        });
        document.getElementById('forceSyncBtn').style.display = navigator.onLine ? 'inline-block' : 'none';
    }
}
document.getElementById('forceSyncBtn').addEventListener('click', function () {
    const queue = getPendingActions();
    if (queue.length === 0) return;
    setTimeout(() => {
        localStorage.setItem('pendingSyncQueue', '[]');
        updateQueueDisplay();
        alert('Pending actions synced!');
    }, 1000);
});
window.addEventListener('OnlineStatusChanged', updateQueueDisplay);
window.addEventListener('storage', updateQueueDisplay);
document.addEventListener('DOMContentLoaded', updateQueueDisplay);
</script>
</main>
