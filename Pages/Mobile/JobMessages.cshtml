@page
@using MVP_Core.Data.Models
@inject MVP_Core.Services.Admin.DispatcherService DispatcherService
@{
    // Sprint 21: Technician view for job message thread
    int techId = 0;
    int.TryParse(Request.Query["techId"], out techId);
    int requestId = 0;
    int.TryParse(Request.Query["requestId"], out requestId);
    var thread = DispatcherService.GetMessageThreadForRequest(requestId);
    var unreadCount = thread.Count(m => !m.ReadFlag && m.SenderType == "Dispatcher");
    ViewData["Title"] = "Job Messages";
}
<h2 class="mb-4">Job Messages</h2>
@if (thread == null || !thread.Any())
{
    <div class="alert alert-info">No messages yet.</div>
}
else
{
    <div class="mb-3">
        @if (unreadCount > 0)
        {
            <span class="badge bg-danger">New message!</span>
        }
    </div>
    <ul class="list-group mb-4">
    @foreach (var msg in thread)
    {
        var color = msg.SenderType == "Tech" ? "bg-success text-white" : "bg-light text-dark";
        <li class="list-group-item @color">
            <span class="fw-bold">@msg.SenderType:</span> @msg.MessageBody
            <span class="float-end small text-muted">@msg.Timestamp.ToLocalTime().ToString("g")</span>
            @if (!msg.ReadFlag && msg.SenderType == "Dispatcher")
            {
                <span class="badge bg-warning ms-2">Unread</span>
            }
        </li>
    }
    </ul>
}
<form method="post">
    <input type="hidden" name="techId" value="@techId" />
    <input type="hidden" name="requestId" value="@requestId" />
    <div class="input-group mb-3">
        <textarea name="messageBody" class="form-control" placeholder="Type a reply..." required></textarea>
        <button type="submit" class="btn btn-primary">Reply</button>
    </div>
</form>
@if (TempData["MessageStatus"] != null)
{
    <div class="alert alert-success">@TempData["MessageStatus"]</div>
}
