@page
@model Pages.Admin.EmployeeCentralModel
@{
    ViewData["Title"] = "Employee Centralized Activity Hub";
}
<h2 class="mb-3">Employee Centralized Activity Hub</h2>
<div class="d-flex justify-content-between align-items-center mb-3">
    <button type="button" class="btn btn-outline-secondary" onclick="window.location.href='/Admin/Dashboard'">Back to Dashboard</button>
    <div>
        <button type="button" class="btn btn-info" id="refreshBtn" onclick="location.reload();">Refresh</button>
        <button type="button" class="btn btn-success" id="autoRefreshBtn" onclick="toggleAutoRefresh()">Start Auto-Refresh</button>
    </div>
</div>
<div id="notificationArea" class="alert alert-warning d-none mb-3"></div>
<div id="loadingSpinner" style="display:none;" class="text-center mb-3">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>
<form method="get" class="mb-3 rounded shadow-sm p-3 bg-light" onsubmit="document.getElementById('loadingSpinner').style.display='block';">
    <div class="row g-2 align-items-center">
        <div class="col-md-3">
            <label class="form-label">Employee(s):</label>
            <select name="TechId" class="form-select" multiple>
                @foreach (var tech in Model.TechnicianList)
                {
                    <option value="@tech.Id">@tech.FullName</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <label class="form-label">Date Range:</label>
            <div class="input-group">
                <input type="date" name="StartDate" class="form-control" value="@(Model.StartDate.HasValue ? Model.StartDate.Value.ToString("yyyy-MM-dd") : "")" />
                <input type="date" name="EndDate" class="form-control" value="@(Model.EndDate.HasValue ? Model.EndDate.Value.ToString("yyyy-MM-dd") : "")" />
                <button type="button" class="btn btn-outline-secondary ms-2" onclick="quickDate('7')">Last 7 Days</button>
                <button type="button" class="btn btn-outline-secondary ms-2" onclick="quickDate('30')">This Month</button>
            </div>
        </div>
        <div class="col-md-3">
            <label class="form-label">Log Type:</label>
            <select name="LogType" class="form-select" multiple>
                <option value="Idle">Idle</option>
                <option value="ClockIn">Clock-In</option>
                <option value="BreakCompliance">Break Compliance</option>
                <option value="Overtime">Overtime</option>
                <option value="Geo">Geo Validation</option>
                <option value="Review">Anonymous Review</option>
                <option value="Confidence">Confidence Decay</option>
                <option value="Behavior">Behavioral Detection</option>
            </select>
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <input type="text" name="Keyword" class="form-control me-2" placeholder="Search keyword..." />
            <button type="submit" class="btn btn-primary w-100">Filter</button>
            <button type="submit" name="export" value="csv" class="btn btn-secondary ms-2">Export CSV</button>
            <button type="submit" name="export" value="pdf" class="btn btn-secondary ms-2">Export PDF</button>
            <button type="submit" name="export" value="excel" class="btn btn-secondary ms-2">Export Excel</button>
        </div>
    </div>
</form>
@if (!Model.ActivityTimeline.Any() && string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-info">No activity found. Try adjusting your filters.</div>
}
else if (Model.ActivityTimeline.Any())
{
    <div class="row mb-3">
        <div class="col-md-3">
            <div class="card text-bg-danger mb-2" onclick="showStatDetail('severe')" style="cursor:pointer;">
                <div class="card-body">
                    <h5 class="card-title">Severe Flags</h5>
                    <p class="card-text fs-4 fw-bold">@Model.SevereFlagCount</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-bg-info mb-2" onclick="showStatDetail('trust')" style="cursor:pointer;">
                <div class="card-body">
                    <h5 class="card-title">Avg Trust Score</h5>
                    <p class="card-text fs-4 fw-bold">@Model.AvgTrustScore</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-bg-warning mb-2" onclick="showStatDetail('idle')" style="cursor:pointer;">
                <div class="card-body">
                    <h5 class="card-title">Idle Minutes (7d)</h5>
                    <p class="card-text fs-4 fw-bold">@Model.TotalIdleMinutes</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-bg-success mb-2" onclick="showStatDetail('pulse')" style="cursor:pointer;">
                <div class="card-body">
                    <h5 class="card-title">Avg Pulse Score</h5>
                    <p class="card-text fs-4 fw-bold">@Model.AvgPulseScore</p>
                </div>
            </div>
        </div>
    </div>
    <div class="mb-4">
        <canvas id="activityChart" height="120"></canvas>
    </div>
    <div class="timeline">
        @foreach (var log in Model.ActivityTimeline)
        {
            <div class="timeline-item mb-2 p-2 border rounded bg-white shadow-sm" onclick="openDrilldownModal(@log.Timestamp.Ticks)">
                <div class="d-flex justify-content-between">
                    <span class="fw-bold">@log.Timestamp.ToString("g")</span>
                    <span class="badge bg-secondary">@log.LogType</span>
                </div>
                <div><b><a href="#" onclick="openProfileModal('@log.EmployeeName'); return false;">@log.EmployeeName</a></b>: @log.Description</div>
                <div class="small text-muted">@log.Details</div>
            </div>
        }
    </div>
}
<div id="drilldownModal" class="modal fade" tabindex="-1" aria-labelledby="drilldownModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="drilldownModalLabel">Activity Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="drilldownModalBody">
        <!-- Details will be loaded here -->
      </div>
    </div>
  </div>
</div>
<div id="analyticsModal" class="modal fade" tabindex="-1" aria-labelledby="analyticsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="analyticsModalLabel">Metric Analytics</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="analyticsModalBody">
        <!-- Analytics details and Chart.js chart will be loaded here -->
        <canvas id="analyticsChart" height="120"></canvas>
      </div>
    </div>
  </div>
</div>
<div id="profileModal" class="modal fade" tabindex="-1" aria-labelledby="profileModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="profileModalLabel">Employee Profile</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="profileModalBody">
        <!-- Profile summary, sparkline, logs, heatmap will be loaded here -->
        <div id="profileSummary"></div>
        <canvas id="profileSparkline" height="60"></canvas>
        <div id="profileActionLogs"></div>
        <canvas id="profileHeatmap" height="120"></canvas>
      </div>
    </div>
  </div>
</div>
<div id="toastContainer" class="position-fixed top-0 end-0 p-3" style="z-index: 1080; max-width: 350px;"></div>
<div id="notificationHistory" class="position-fixed top-0 end-0 mt-5 me-3 bg-white border rounded shadow-sm" style="width:350px; max-height:60vh; overflow-y:auto; display:none;"></div>
<div class="d-flex justify-content-end mb-2">
  <button class="btn btn-sm btn-outline-secondary me-2" onclick="toggleNotificationHistory()">History</button>
  <button class="btn btn-sm btn-outline-warning me-2" onclick="toggleMute('Severe')">Mute Severe</button>
  <button class="btn btn-sm btn-outline-info me-2" onclick="toggleMute('Info')">Mute Info</button>
  <button class="btn btn-sm btn-outline-danger" onclick="toggleMute('Warning')">Mute Warning</button>
</div>
<!-- Sprint 77.1 - LiveSync Analytics Mesh: Chart UI/JS Enhancements -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@3.1.0"></script>
<script>
const chartConfigs = [
    { id: 'trustScoreChart', type: 'line', chartType: 'trustScore', label: 'Trust Score', color: 'rgba(54,162,235,1)' },
    { id: 'idleMinutesChart', type: 'bar', chartType: 'idleMinutes', label: 'Idle Minutes', color: 'rgba(255,193,7,1)' },
    { id: 'geoBreakChart', type: 'pie', chartType: 'geoBreak', label: 'Geo Validation', color: 'rgba(40,167,69,1)' },
    { id: 'overtimeChart', type: 'bar', chartType: 'overtime', label: 'Overtime Events', color: 'rgba(220,53,69,1)' },
    { id: 'confidenceGeoChart', type: 'line', chartType: 'confidenceGeo', label: 'Confidence vs Geo', color: 'rgba(0,123,255,1)' },
    { id: 'clockinTrustChart', type: 'line', chartType: 'clockinTrust', label: 'Clock-in vs Trust', color: 'rgba(108,117,125,1)' },
    { id: 'overrideEmergencyChart', type: 'bar', chartType: 'overrideEmergency', label: 'Override vs Emergency', color: 'rgba(23,162,184,1)' }
];
// Layout preferences
function saveLayoutPrefs() {
    const prefs = chartConfigs.map(cfg => ({ id: cfg.id, visible: document.getElementById(cfg.id + '_toggle').checked }));
    localStorage.setItem('employeeCentralChartPrefs', JSON.stringify(prefs));
}
function loadLayoutPrefs() {
    const prefs = JSON.parse(localStorage.getItem('employeeCentralChartPrefs') || '[]');
    prefs.forEach(pref => {
        const chartDiv = document.getElementById(pref.id + '_container');
        if (chartDiv) chartDiv.style.display = pref.visible ? '' : 'none';
        const toggle = document.getElementById(pref.id + '_toggle');
        if (toggle) toggle.checked = !!pref.visible;
    });
}
function setupLayoutControls() {
    chartConfigs.forEach(cfg => {
        const toggle = document.getElementById(cfg.id + '_toggle');
        if (toggle) toggle.addEventListener('change', () => {
            document.getElementById(cfg.id + '_container').style.display = toggle.checked ? '' : 'none';
            saveLayoutPrefs();
        });
    });
    loadLayoutPrefs();
}
// Chart annotation logic
function getDropAnnotations(data, threshold = 0.1) {
    const annots = [];
    for (let i = 1; i < data.length; i++) {
        const drop = (data[i-1] - data[i]) / (data[i-1] || 1);
        if (drop >= threshold) {
            annots.push({
                type: 'label',
                xValue: i,
                yValue: data[i],
                backgroundColor: 'rgba(255,0,0,0.7)',
                content: ['?? Drop >' + Math.round(drop*100) + '%'],
                font: { size: 12 },
                position: 'center',
                callout: { display: true },
                tooltip: { enabled: true, callbacks: { label: () => `Drop >${Math.round(drop*100)}% at ${i}` } }
            });
        }
    }
    return annots;
}
function renderChart(config, data) {
    const ctx = document.getElementById(config.id).getContext('2d');
    if (window[config.id + '_instance']) window[config.id + '_instance'].destroy();
    let chartData = {};
    let plugins = [ChartAnnotation];
    let options = { responsive: true, plugins: { legend: { position: 'bottom' } } };
    if (config.chartType === 'confidenceGeo') {
        chartData = {
            labels: data.labels,
            datasets: [
                { label: 'Confidence', data: data.confidence, borderColor: config.color, backgroundColor: config.color, fill: false },
                { label: 'Geo Flags', data: data.geoFlags, borderColor: 'rgba(255,193,7,1)', backgroundColor: 'rgba(255,193,7,0.2)', fill: false }
            ]
        };
        options.plugins.annotation = { annotations: getDropAnnotations(data.confidence) };
    } else if (config.chartType === 'clockinTrust') {
        chartData = {
            labels: data.labels,
            datasets: [
                { label: 'Late Clock-in', data: data.lateClockin, borderColor: config.color, backgroundColor: config.color, fill: false },
                { label: 'Trust', data: data.trust, borderColor: 'rgba(40,167,69,1)', backgroundColor: 'rgba(40,167,69,0.2)', fill: false }
            ]
        };
        options.plugins.annotation = { annotations: getDropAnnotations(data.trust) };
    } else if (config.chartType === 'trustScore') {
        chartData = {
            labels: data.labels,
            datasets: [{ label: config.label, data: data.data, borderColor: config.color, backgroundColor: config.color, fill: false }]
        };
        options.plugins.annotation = { annotations: getDropAnnotations(data.data) };
    } else if (config.chartType === 'overrideEmergency') {
        chartData = {
            labels: data.labels,
            datasets: [
                { label: 'Override', data: data['override'], backgroundColor: config.color },
                { label: 'Emergency', data: data.emergency, backgroundColor: 'rgba(220,53,69,0.7)' }
            ]
        };
    } else if (config.chartType === 'geoBreak') {
        chartData = {
            labels: data.labels,
            datasets: [{ label: config.label, data: data.data, backgroundColor: [config.color, 'rgba(220,53,69,0.7)', 'rgba(255,193,7,0.7)'] }]
        };
    } else if (config.chartType === 'overtime') {
        chartData = {
            labels: data.labels,
            datasets: [{ label: config.label, data: data.data, backgroundColor: [config.color, 'rgba(220,53,69,0.7)', 'rgba(255,193,7,0.7)'] }]
        };
    } else {
        chartData = {
            labels: data.labels,
            datasets: [{ label: config.label, data: data.data, borderColor: config.color, backgroundColor: config.color, fill: false }]
        };
    }
    window[config.id + '_instance'] = new Chart(ctx, {
        type: config.type,
        data: chartData,
        options,
        plugins
    });
}
function loadCharts() {
    chartConfigs.forEach(config => {
        fetch(`/Admin/EmployeeCentral?handler=ChartData&chartType=${config.chartType}`)
            .then(resp => resp.json())
            .then(data => renderChart(config, data));
    });
}
// Auto-refresh logic
let chartAutoRefresh = true;
function setChartAutoRefresh(enabled) {
    chartAutoRefresh = enabled;
    document.getElementById('chartAutoRefreshToggle').checked = enabled;
}
document.getElementById('chartAutoRefreshToggle').addEventListener('change', function() {
    setChartAutoRefresh(this.checked);
});
setInterval(() => {
    if (chartAutoRefresh) loadCharts();
}, 60000);
window.addEventListener('DOMContentLoaded', () => {
    loadCharts();
    setupLayoutControls();
});
// SignalR notification highlight
const chartAlertMap = {};
const notificationConnection = new signalR.HubConnectionBuilder()
    .withUrl("/notificationHub")
    .configureLogging(signalR.LogLevel.Information)
    .build();
notificationConnection.on("ReceiveNotification", function (message, severity) {
    chartConfigs.forEach(cfg => {
        if (message.includes(cfg.label) || message.includes(cfg.chartType)) {
            const card = document.getElementById(cfg.id + '_container');
            if (card) {
                card.classList.add('border-danger', 'border-3');
                let icon = document.createElement('span');
                icon.innerHTML = '??';
                icon.className = 'ms-2 chart-alert-icon';
                card.querySelector('.card-header').appendChild(icon);
                setTimeout(() => {
                    card.classList.remove('border-danger', 'border-3');
                    if (icon) icon.remove();
                }, 4000);
            }
        }
    });
});
notificationConnection.start().catch(function (err) {
    console.error("SignalR notification connection error: ", err.toString());
});
</script>
<div class="mb-3">
    <label class="form-label"><input type="checkbox" id="chartAutoRefreshToggle" checked> Auto-refresh charts every 60s</label>
    <span class="ms-3">Show/hide charts:</span>
    <span>
        <!-- Layout toggles for each chart -->
        <input type="checkbox" id="trustScoreChart_toggle" checked> Trust Score
        <input type="checkbox" id="idleMinutesChart_toggle" checked> Idle Minutes
        <input type="checkbox" id="geoBreakChart_toggle" checked> Geo Validation
        <input type="checkbox" id="overtimeChart_toggle" checked> Overtime
        <input type="checkbox" id="confidenceGeoChart_toggle" checked> Confidence/Geo
        <input type="checkbox" id="clockinTrustChart_toggle" checked> Clock-in/Trust
        <input type="checkbox" id="overrideEmergencyChart_toggle" checked> Override/Emergency
    </span>
</div>
<!-- Chart containers with IDs for layout control -->
<div class="row mb-4">
    <div class="col-md-6 mb-4" id="trustScoreChart_container">
        <div class="card shadow-sm">
            <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
                Trust Score Chart
                <div>
                    <button class="btn btn-sm btn-outline-secondary export-csv" data-chart="trustScoreChart">CSV</button>
                    <button class="btn btn-sm btn-outline-secondary export-excel" data-chart="trustScoreChart">Excel</button>
                    <button class="btn btn-sm btn-outline-secondary export-pdf" data-chart="trustScoreChart">PDF</button>
                </div>
            </div>
            <div class="card-body">
                <canvas id="trustScoreChart" height="120"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-6 mb-4" id="idleMinutesChart_container">
        <div class="card shadow-sm">
            <div class="card-header bg-warning text-dark d-flex justify-content-between align-items-center">
                Idle Minutes Chart
                <div>
                    <button class="btn btn-sm btn-outline-secondary export-csv" data-chart="idleMinutesChart">CSV</button>
                    <button class="btn btn-sm btn-outline-secondary export-excel" data-chart="idleMinutesChart">Excel</button>
                    <button class="btn btn-sm btn-outline-secondary export-pdf" data-chart="idleMinutesChart">PDF</button>
                </div>
            </div>
            <div class="card-body">
                <canvas id="idleMinutesChart" height="120"></canvas>
            </div>
        </div>
    </div>
</div>
<div class="row mb-4">
    <div class="col-md-6 mb-4" id="geoBreakChart_container">
        <div class="card shadow-sm">
            <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                Geo Validation Chart
                <div>
                    <button class="btn btn-sm btn-outline-secondary export-csv" data-chart="geoBreakChart">CSV</button>
                    <button class="btn btn-sm btn-outline-secondary export-excel" data-chart="geoBreakChart">Excel</button>
                    <button class="btn btn-sm btn-outline-secondary export-pdf" data-chart="geoBreakChart">PDF</button>
                </div>
            </div>
            <div class="card-body">
                <canvas id="geoBreakChart" height="120"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-6 mb-4" id="overtimeChart_container">
        <div class="card shadow-sm">
            <div class="card-header bg-danger text-white d-flex justify-content-between align-items-center">
                Overtime Events Chart
                <div>
                    <button class="btn btn-sm btn-outline-secondary export-csv" data-chart="overtimeChart">CSV</button>
                    <button class="btn btn-sm btn-outline-secondary export-excel" data-chart="overtimeChart">Excel</button>
                    <button class="btn btn-sm btn-outline-secondary export-pdf" data-chart="overtimeChart">PDF</button>
                </div>
            </div>
            <div class="card-body">
                <canvas id="overtimeChart" height="120"></canvas>
            </div>
        </div>
    </div>
</div>
<div class="row mb-4">
    <div class="col-md-4 mb-4" id="confidenceGeoChart_container">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                Confidence Decay vs Geo
                <div>
                    <button class="btn btn-sm btn-outline-secondary export-csv" data-chart="confidenceGeoChart">CSV</button>
                    <button class="btn btn-sm btn-outline-secondary export-excel" data-chart="confidenceGeoChart">Excel</button>
                    <button class="btn btn-sm btn-outline-secondary export-pdf" data-chart="confidenceGeoChart">PDF</button>
                </div>
            </div>
            <div class="card-body">
                <canvas id="confidenceGeoChart" height="120"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-4 mb-4" id="clockinTrustChart_container">
        <div class="card shadow-sm">
            <div class="card-header bg-secondary text-white d-flex justify-content-between align-items-center">
                Clock-in Stats vs Trust
                <div>
                    <button class="btn btn-sm btn-outline-secondary export-csv" data-chart="clockinTrustChart">CSV</button>
                    <button class="btn btn-sm btn-outline-secondary export-excel" data-chart="clockinTrustChart">Excel</button>
                    <button class="btn btn-sm btn-outline-secondary export-pdf" data-chart="clockinTrustChart">PDF</button>
                </div>
            </div>
            <div class="card-body">
                <canvas id="clockinTrustChart" height="120"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-4 mb-4" id="overrideEmergencyChart_container">
        <div class="card shadow-sm">
            <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
                Override Use vs Emergencies
                <div>
                    <button class="btn btn-sm btn-outline-secondary export-csv" data-chart="overrideEmergencyChart">CSV</button>
                    <button class="btn btn-sm btn-outline-secondary export-excel" data-chart="overrideEmergencyChart">Excel</button>
                    <button class="btn btn-sm btn-outline-secondary export-pdf" data-chart="overrideEmergencyChart">PDF</button>
                </div>
            </div>
            <div class="card-body">
                <canvas id="overrideEmergencyChart" height="120"></canvas>
            </div>
        </div>
    </div>
</div>
<!-- End Sprint 77.1 Chart UI/JS Enhancements -->
