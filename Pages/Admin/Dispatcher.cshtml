@page
// FixItFred Patch Log — Sprint 28 Recovery
// [2025-07-25T00:00:00Z] — Removed local zones variable, all usages now reference Model.ServiceZones only.
@using System.Linq
@using MVP_Core.Models.Admin
@using MVP_Core.Data.Models
@model MVP_Core.Pages.Admin.DispatcherModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Dispatcher Kanban";
    Layout = "/Pages/Shared/_Layout.cshtml";
    var statuses = new[] { "Unassigned", "Assigned", "En Route", "Complete" };
    var activeTab = Request?.Query["tab"].ToString() ?? "Unassigned"; // FixItFred: Sprint 30D.2 — Safe null navigation 2024-07-25
    var filteredRequests = Model.DispatcherRequests ?? new List<RequestSummaryDto>();
    var techList = Model.TechnicianStatuses?.Select(t => t.Name).ToList() ?? new List<string>();
    var broadcast = Model.Notifications?.FirstOrDefault(n => n.Type == "Broadcast");
    var techHeartbeats = Model.TechnicianStatuses ?? new List<TechnicianStatusDto>();
    var stats = Model.DispatcherStats;
    var workloads = new[] { "All", "Light", "Moderate", "Heavy" };
}
//<partial name="_ValidationSummary" />
@if (TempData["SystemMessages"] != null)
{
    ViewData["AlertType"] = "info";
    ViewData["AlertMessage"] = TempData["SystemMessages"];
    <partial name="_Alert" />
}
@if (broadcast != null)
{
    ViewData["AlertType"] = "danger";
    ViewData["AlertMessage"] = broadcast.Message;
    <partial name="_Alert" />
}
<partial name="_LoadingSpinner" />
@* --- Live Diagnostics Panel --- *@
<div class="row mb-3">
    <div class="col-md-12">
        <div class="card shadow-sm mb-3">
            <div class="card-body py-2 px-4">
                <div class="row text-center">
                    <div class="col-md-3 mb-2">
                        <span class="fw-bold">Live Technician Pings</span><br />
                        <span class="text-success">@techHeartbeats.Count(t => t.IsOnline)</span> / <span class="text-muted">@techHeartbeats.Count()</span>
                    </div>
                    <div class="col-md-3 mb-2">
                        <span class="fw-bold">Jobs Delayed &gt; 30 min</span><br />
                        <span class="text-danger">@filteredRequests.Count(r => r.DelayMinutes > 30)</span>
                    </div>
                    <div class="col-md-3 mb-2">
                        <span class="fw-bold">System Health</span><br />
                        <span class="badge bg-success">OK</span>
                    </div>
                    <div class="col-md-3 mb-2">
                        <span class="fw-bold">Active Zones</span><br />
                        <span class="text-info">@string.Join(", ", Model.ServiceZones.Select(z => z))</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@* --- Smart Dispatcher Filter Panel --- *@
<form method="post" asp-page-handler="ApplyFilters" class="mb-4">
    <div class="row g-2 align-items-end">
        <div class="col-md-2">
            <label class="form-label">Service Type</label>
            <select name="ServiceType" class="form-select">
                <option value="">All</option>
                <option value="Plumbing">Plumbing</option>
                <option value="Heating">Heating</option>
            </select>
        </div>
        <div class="col-md-2">
            <label class="form-label">Zone</label>
            <select name="Zone" class="form-select">
                <option value="">All</option>
                @foreach (var zone in Model.ServiceZones)
                {
                    <option value="@zone">@zone</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <label class="form-label">Technician</label>
            <partial name="_TechnicianDropdown" model="Model.TechnicianDropdownViewModel" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Workload</label>
            <select name="Workload" class="form-select">
                @foreach (var wl in workloads)
                {
                    <option value="@wl">@wl</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <label class="form-label">Status</label>
            <select name="Status" class="form-select">
                <option value="">All</option>
                <option value="Open">Open</option>
                <option value="Assigned">Assigned</option>
                <option value="Delayed">Delayed</option>
                <option value="Follow-up">Follow-up</option>
            </select>
        </div>
        <div class="col-md-2">
            <label class="form-label">Sort By</label>
            <select name="SortBy" class="form-select">
                <option value="">Default</option>
                <option value="Oldest">Oldest First</option>
                <option value="MostDelayed">Most Delayed</option>
                <option value="ZIP">ZIP</option>
            </select>
        </div>
        <div class="col-md-2">
            <button class="btn btn-primary mt-2">Apply Filters</button>
        </div>
    </div>
</form>
@* --- Filtered Request Panel --- *@
@if (filteredRequests.Any())
{
    <div class="row mb-4">
        <div class="col-12">
            <h4>Filtered Requests</h4>
            <table class="table table-bordered table-hover">
                <thead class="table-light">
                    <tr>
                        <th>ID</th>
                        <th>Service Type</th>
                        <th>Technician</th>
                        <th>Status</th>
                        <th>Priority</th>
                        <th>ZIP</th>
                        <th>Delay (min)</th>
                        <th>Reassign</th>
                        <th>Emergency</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var req in filteredRequests)
                {
                    var emergencyClass = req.IsEmergency ? "border border-danger" : "";
                    <tr class="@emergencyClass">
                        <td>@req.Id @if (req.IsEmergency) { <span title="Emergency" class="text-danger fw-bold">??</span> }</td>
                        <td>@req.ServiceType</td>
                        <td>@req.Technician</td>
                        <td>@req.Status</td>
                        <td>@req.Priority</td>
                        <td>@req.Zip</td>
                        <td>@req.DelayMinutes</td>
                        <td>
                            @if (User.IsInRole("Dispatcher") || User.IsInRole("Supervisor")) {
                            <form method="post" asp-page-handler="ReassignTech" style="display:inline;">
                                <input type="hidden" name="requestId" value="@req.Id" />
                                @{
                                    var skillTagMasterList = new[] { "Plumbing", "Air Conditioning", "Heating", "Water Filtration", "Trainee", "Mentor" };
                                    string requiredSkill = req.ServiceType ?? "";
                                    string jobZip = req.Zip ?? "";
                                    var suggestedTechs = Model.TechnicianStatuses.AsEnumerable().Where(t => t.Status == requiredSkill && t.Name != null).ToList();
                                }
                                <select name="newTechnicianId" class="form-select form-select-sm d-inline-block w-auto me-1">
                                    @if (suggestedTechs != null && suggestedTechs.Any())
                                    {
                                        @foreach (var tech in suggestedTechs)
                                        {
                                            <option value="@tech.TechnicianId">@tech.Name</option>
                                        }
                                    }
                                    else
                                    {
                                        <option disabled>No matching techs — show all</option>
                                        @foreach (var tech in Model.TechnicianStatuses)
                                        {
                                            <option value="@tech.TechnicianId">@tech.Name</option>
                                        }
                                    }
                                </select>
                                <button type="submit" class="btn btn-outline-primary btn-sm">Reassign</button>
                            </form>
                            }
                        </td>
                        <td>
                            @if (User.IsInRole("Supervisor")) {
                            <form method="post" asp-page-handler="FlagEmergency" style="display:inline;">
                                <input type="hidden" name="requestId" value="@req.Id" />
                                <button type="submit" class="btn btn-danger btn-sm">?? Emergency</button>
                            </form>
                            }
                        </td>
                        <td>
                            <a href="/Admin/RequestMessages?requestId=@req.Id" class="btn btn-outline-secondary btn-sm">?? Messages</a>
                            <a href="/Admin/DispatcherHistory?requestId=@req.Id" class="btn btn-outline-info btn-sm">View Timeline</a>
                            <a href="/Admin/UploadMedia?requestId=@req.Id" class="btn btn-outline-primary btn-sm">?? Upload Media</a>
                            <a href="/Admin/ViewMedia?requestId=@req.Id" class="btn btn-outline-secondary btn-sm">?? View Media Vault</a>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
}
@* --- End Filtered Request Panel --- *@
<div class="row mb-3">
    <div class="col-md-9">
        <form method="get" class="mb-0">
            <div class="row g-2 align-items-end">
                <div class="col-md-2">
                    <label class="form-label">SLA Filter</label>
                    <select name="SlaFilter" class="form-select" onchange="this.form.submit()">
                        @if (string.IsNullOrEmpty(Model.SlaFilter)) {
                            <option value="" selected>All Jobs</option>
                        } else {
                            <option value="">All Jobs</option>
                        }
                        @if (Model.SlaFilter == "overdue") {
                            <option value="overdue" selected>Overdue</option>
                        } else {
                            <option value="overdue">Overdue</option>
                        }
                        @if (Model.SlaFilter == "today") {
                            <option value="today" selected>Due Today</option>
                        } else {
                            <option value="today">Due Today</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="serviceType" class="form-label">Service Type</label>
                    <select id="serviceType" name="FilterServiceType" class="form-select" onchange="this.form.submit()">
                        @if (string.IsNullOrEmpty(Model.FilterServiceType)) {
                            <option value="" selected>All</option>
                        } else {
                            <option value="">All</option>
                        }
                        @foreach (var type in Model.ServiceTypes)
                        {
                            if (Model.FilterServiceType == type) {
                                <option value="@type" selected>@type</option>
                            } else {
                                <option value="@type">@type</option>
                            }
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="since" class="form-label">Submitted Since</label>
                    <input type="date" id="since" name="FilterSinceString" class="form-control" value="@Model.FilterSinceString" onchange="this.form.submit()" />
                </div>
                <div class="col-md-3">
                    <label for="sortBy" class="form-label">Sort By</label>
                    <select id="sortBy" name="SortBy" class="form-select" onchange="this.form.submit()">
                        @if (Model.SortBy == "priority") {
                            <option value="priority" selected>Priority</option>
                        } else {
                            <option value="priority">Priority</option>
                        }
                        @if (Model.SortBy == "service") {
                            <option value="service" selected>Service Type</option>
                        } else {
                            <option value="service">Service Type</option>
                        }
                        @if (Model.SortBy == "time") {
                            <option value="time" selected>Submission Time</option>
                        } else {
                            <option value="time">Submission Time</option>
                        }
                    </select>
                </div>
            </div>
        </form>
    </div>
    <div class="col-md-3">
        <div class="card border-danger sla-alerts-panel mb-3">
            <div class="card-header bg-danger text-white py-2 px-3"><strong>Escalated Jobs</strong></div>
            <div class="card-body p-2">
                <ul class="list-unstyled mb-0" id="escalated-jobs-list">
                    @foreach (var job in (Model.Requests?.AsEnumerable().Where(r => r.IsEscalated).OrderByDescending(r => r.EscalatedAt) ?? Enumerable.Empty<ServiceRequest>()))
                    {
                        <li class="mb-1"><span class="badge bg-danger">Escalated</span> <span class="ms-1">#@job.Id @job.CustomerName</span></li>
                    }
                </ul>
            </div>
        </div>
        <div class="card border-warning sla-alerts-panel">
            <div class="card-header bg-warning text-dark py-2 px-3"><strong>Upcoming SLA Alerts</strong></div>
            <div class="card-body p-2">
                <ul class="list-unstyled mb-0" id="sla-alerts-list">
                    @foreach (var job in (Model.Requests?.AsEnumerable().Where(r => r.DueDate.HasValue && r.DueDate.Value > DateTime.UtcNow && (r.DueDate.Value - DateTime.UtcNow).TotalHours < 2).OrderBy(r => r.DueDate) ?? Enumerable.Empty<ServiceRequest>()))
                    {
                        if (job.DueDate.HasValue)
                        {
                            <li class="mb-1"><span class="badge bg-warning text-dark">Due @job.DueDate.Value.ToLocalTime():t</span> <span class="ms-1">#@job.Id @job.CustomerName</span></li>
                        }
                    }
                </ul>
            </div>
        </div>
    </div>
</div>
<div class="mb-5" id="kanban-analytics">
    <h4>Kanban Analytics</h4>
    <div class="row g-3">
        <div class="col-md-4">
            <canvas id="kanbanStatusChart" height="180"></canvas>
        </div>
        <div class="col-md-4">
            <canvas id="kanbanPriorityChart" height="180"></canvas>
        </div>
        <div class="col-md-4">
            <div class="card p-3">
                <h6 class="mb-2">Job Stats</h6>
                <ul class="list-unstyled mb-0">
                    <li><strong>Total:</strong> <span id="stat-total">@Model.Requests.Count</span></li>
                    <li><strong>Unassigned:</strong> <span id="stat-unassigned">@Model.Requests.Count(r => (Model.TechnicianStatuses.FirstOrDefault(ts => ts.TechnicianId == r.AssignedTechnicianId)?.Status ?? "Unassigned") == "Unassigned")</span></li>
                    <li><strong>Assigned:</strong> <span id="stat-assigned">@Model.Requests.Count(r => (Model.TechnicianStatuses.FirstOrDefault(ts => ts.TechnicianId == r.AssignedTechnicianId)?.Status ?? "Unassigned") == "Assigned")</span></li>
                    <li><strong>En Route:</strong> <span id="stat-enroute">@Model.Requests.Count(r => (Model.TechnicianStatuses.FirstOrDefault(ts => ts.TechnicianId == r.AssignedTechnicianId)?.Status ?? "Unassigned") == "En Route")</span></li>
                    <li><strong>Complete:</strong> <span id="stat-complete">@Model.Requests.Count(r => (Model.TechnicianStatuses.FirstOrDefault(ts => ts.TechnicianId == r.AssignedTechnicianId)?.Status ?? "Unassigned") == "Complete")</span></li>
                    <li><strong>High Priority:</strong> <span id="stat-high">@Model.Requests.Count(r => r.Priority == "High")</span></li>
                    <li><strong>Normal Priority:</strong> <span id="stat-normal">@Model.Requests.Count(r => r.Priority == "Normal")</span></li>
                    <li><strong>Low Priority:</strong> <span id="stat-low">@Model.Requests.Count(r => r.Priority == "Low")</span></li>
                </ul>
            </div>
        </div>
    </div>
</div>
<ul class="nav nav-tabs mb-3" id="kanbanTabs">
    @foreach (var status in statuses)
    {
        <li class="nav-item">
            <a class="nav-link @(activeTab == status ? "active" : "")" href="?tab=@status">@status</a>
        </li>
    }
</ul>
<form id="reorderForm" method="post" asp-page-handler="Reorder" style="display:none;">
    <input type="hidden" name="OrderJson" id="orderJson" />
</form>
@await Html.PartialAsync("_TechnicianLoadPanel", Model.TechnicianLoads)
@* --- Kanban Board --- *@
<div class="row kanban-board" id="kanbanBoard">
    @foreach (var status in statuses)
    {
        <div class="col kanban-column">
            <div class="kanban-column-header bg-light p-2 mb-2 border rounded"><strong>@status</strong></div>
            <div class="kanban-cards" id="kanban-@status" data-status="@status" style="min-height: 200px;">
                @foreach (var req in Model.Requests.AsEnumerable().Where((Func<ServiceRequest, bool>)(r => {
                    var s = Model.TechnicianStatuses?.FirstOrDefault(ts => ts.TechnicianId == r.AssignedTechnicianId)?.Status ?? "Unassigned";
                    return s == status;
                })))
                {
                    <div data-request-id="@req.Id">
                        @await Html.PartialAsync("_JobCard", req)
                        @if (string.IsNullOrEmpty(req.AssignedTechnicianId?.ToString()) && status == "Unassigned")
                        {
                            if (Model.SuggestedTech.ContainsKey(req.Id))
                            {
                                var suggestion = Model.SuggestedTech[req.Id];
                                <div class="suggested-tech mt-2">
                                    <strong>Suggested:</strong> @suggestion.TechName 
                                    (<span class="text-muted">@suggestion.Confidence %</span>)
                                </div>
                            }
                            <form method="post" asp-page-handler="AutoAssign" asp-route-requestId="@req.Id" class="mt-1">
                                <button class="btn btn-warning btn-sm">Auto Assign</button>
                                @Html.AntiForgeryToken()
                            </form>
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>
@if (Model.Requests != null && !Model.Requests.Any())
{
    <div class="alert alert-info mt-4">No service requests found for the selected filters.</div>
}
<hr class="my-5" />
<h4>Kanban Job Movement History</h4>
<form method="get" class="row g-2 mb-3 align-items-end">
    <div class="col-md-2">
        <label class="form-label">From Status</label>
        <select name="HistoryFromStatus" class="form-select" onchange="this.form.submit()">
            <option value="">All</option>
            @foreach (var s in statuses) {
                if (Model.HistoryFromStatus == s) {
                    <option value="@s" selected>@s</option>
                } else {
                    <option value="@s">@s</option>
                }
            }
        </select>
    </div>
    <div class="col-md-2">
        <label class="form-label">To Status</label>
        <select name="HistoryToStatus" class="form-select" onchange="this.form.submit()">
            <option value="">All</option>
            @foreach (var s in statuses) {
                if (Model.HistoryToStatus == s) {
                    <option value="@s" selected>@s</option>
                } else {
                    <option value="@s">@s</option>
                }
            }
        </select>
    </div>
    <div class="col-md-2">
        <label class="form-label">User</label>
        <input type="text" name="HistoryUser" class="form-control" value="@Model.HistoryUser" placeholder="User..." onchange="this.form.submit()" />
    </div>
    <div class="col-md-2">
        <label class="form-label">From Date</label>
        <input type="date" name="HistoryFromDate" class="form-control" value="@Model.HistoryFromDateString" onchange="this.form.submit()" />
    </div>
    <div class="col-md-2">
        <label class="form-label">To Date</label>
        <input type="date" name="HistoryToDate" class="form-control" value="@Model.HistoryToDateString" onchange="this.form.submit()" />
    </div>
    <div class="col-md-2 text-end">
        <button type="submit" name="export" value="csv" class="btn btn-outline-secondary me-2">Export CSV</button>
        <button type="submit" name="export" value="excel" class="btn btn-outline-success">Export Excel</button>
    </div>
</form>
<div class="table-responsive">
    <table class="table table-sm table-bordered align-middle">
        <thead class="table-light">
            <tr>
                <th>Time</th>
                <th>Job ID</th>
                <th>From</th>
                <th>To</th>
                <th>To Index</th>
                <th>User</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var log in Model.KanbanHistory)
            {
                <tr>
                    <td>@log.ChangedAt.ToLocalTime().ToString("g")</td>
                    <td>@log.ServiceRequestId</td>
                    <td>@log.FromStatus</td>
                    <td>@log.ToStatus</td>
                    <td>@log.ToIndex</td>
                    <td>@log.ChangedBy</td>
                </tr>
            }
        </tbody>
    </table>
</div>
@await Html.PartialAsync("DispatcherMapModal")
@await Html.PartialAsync("EscalationModal")
@await Html.PartialAsync("_TechnicianProfileModal")
<div id="techProfileModalContainer"></div>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.css" />
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
<script>
// FixItFred: Sprint 30D.1 - Live ETA SignalR client binding
let etaConnection = new signalR.HubConnectionBuilder()
    .withUrl("/etahub?zone=" + encodeURIComponent('@(Model.ServiceZones.FirstOrDefault() ?? "1")'))
    .build();

etaConnection.on("ReceiveETA", function(zone, message) {
    // FixItFred: Display ETA/status updates in real time
    let etaPanel = document.getElementById("live-eta-panel");
    if (!etaPanel) {
        etaPanel = document.createElement("div");
        etaPanel.id = "live-eta-panel";
        etaPanel.className = "alert alert-info mt-3";
        document.body.prepend(etaPanel);
    }
    etaPanel.innerHTML = `<strong>Live ETA Update (Zone ${zone}):</strong> ${message}`;
});

etaConnection.start().catch(function (err) {
    return console.error("SignalR connection error:", err.toString());
});

function renderKanbanCharts() {
    // Status chart
    var statusCounts = {
        Unassigned: parseInt(document.getElementById('stat-unassigned').textContent),
        Assigned: parseInt(document.getElementById('stat-assigned').textContent),
        'En Route': parseInt(document.getElementById('stat-enroute').textContent),
        Complete: parseInt(document.getElementById('stat-complete').textContent)
    };
    var ctxStatus = document.getElementById('kanbanStatusChart').getContext('2d');
    if (window.kanbanStatusChart) window.kanbanStatusChart.destroy();
    window.kanbanStatusChart = new Chart(ctxStatus, {
        type: 'doughnut',
        data: {
            labels: Object.keys(statusCounts),
            datasets: [{
                data: Object.values(statusCounts),
                backgroundColor: ['#adb5bd', '#0d6efd', '#0dcaf0', '#198754']
            }]
        },
        options: { plugins: { legend: { position: 'bottom' } } }
    });
    // Priority chart
    var priorityCounts = {
        High: parseInt(document.getElementById('stat-high').textContent),
        Normal: parseInt(document.getElementById('stat-normal').textContent),
        Low: parseInt(document.getElementById('stat-low').textContent)
    };
    var ctxPriority = document.getElementById('kanbanPriorityChart').getContext('2d');
    if (window.kanbanPriorityChart) window.kanbanPriorityChart.destroy();
    window.kanbanPriorityChart = new Chart(ctxPriority, {
        type: 'pie',
        data: {
            labels: Object.keys(priorityCounts),
            datasets: [{
                data: Object.values(priorityCounts),
                backgroundColor: ['#dc3545', '#6c757d', '#0dcaf0']
            }]
        },
        options: { plugins: { legend: { position: 'bottom' } } }
    });
}
document.addEventListener('DOMContentLoaded', function () {
    renderKanbanCharts();
    const statuses = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(statuses));
    statuses.forEach(function (status) {
        const el = document.getElementById('kanban-' + status);
        if (el) {
            new Sortable(el, {
                group: 'kanban',
                animation: 150,
                onEnd: function (evt) {
                    submitOrder();
                }
            });
        }
    });
    function submitOrder() {
        const order = {};
        statuses.forEach(function (status) {
            const col = document.getElementById('kanban-' + status);
            if (col) {
                order[status] = Array.from(col.querySelectorAll('[data-request-id]')).map(x => x.getAttribute('data-request-id'));
            }
        });
        document.getElementById('orderJson').value = JSON.stringify(order);
        document.getElementById('reorderForm').submit();
    }
});
</script>
<footer class="mt-5 text-center">
    <a href="/Admin/AssignmentLog" class="btn btn-outline-secondary">View Assignment Log</a>
</footer>
