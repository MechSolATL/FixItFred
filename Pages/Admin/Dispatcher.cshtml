@* Sprint 47.4 Patch Log: Dispatch queue animation and ETA adjustments.
@* Sprint 26.5 Patch Log: CS860x/CS8625/CS1998/CS0219 fixes — Nullability, async, and unused variable corrections for Nova review. *@
@* Sprint 26.6 Patch Log: CS8602/CS8604 fix — Added null-conditional operators and null checks for all model dereferences. Previous comments preserved below. *@
@page
// FixItFred Patch Log — Sprint 28 Recovery
// [2025-07-25T00:00:00Z] — Removed local zones variable, all usages now reference Model.ServiceZones only.
@using System.Linq
@using MVP_Core.Models.Admin
@using MVP_Core.Data.Models
@model MVP_Core.Pages.Admin.DispatcherModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
<main role="main" tabindex="-1" aria-label="Dispatcher Kanban Main Content">
@{
    ViewData["Title"] = "Dispatcher Kanban";
    Layout = "/Pages/Shared/_Layout.cshtml";
    var statuses = new[] { "Unassigned", "Assigned", "En Route", "Complete" };
    var activeTab = Request?.Query["tab"].ToString() ?? "Unassigned"; // FixItFred: Sprint 30D.2 — Safe null navigation 2024-07-25
    var filteredRequests = Model?.DispatcherRequests ?? new List<RequestSummaryDto>();
    var techList = Model?.TechnicianStatuses?.Select(t => t.Name).ToList() ?? new List<string>();
    var broadcast = Model?.Notifications?.FirstOrDefault(n => n.Type == "Broadcast");
    var techHeartbeats = Model?.TechnicianStatuses ?? new List<TechnicianStatusDto>();
    var stats = Model?.DispatcherStats;
    var workloads = new[] { "All", "Light", "Moderate", "Heavy" };
    var safeServiceZones = Model.ServiceZones ?? Enumerable.Empty<string>();
}
// Sprint 33.3 - Dispatcher Smart Filters
<div class="card mb-3" role="region" aria-label="Smart Filters">
    <div class="card-body">
        <form method="get" class="row g-2 align-items-end" role="form" aria-label="Dispatcher Smart Filters">
            <div class="col-md-2">
                <label class="form-label" for="PendingOnly">Show Only</label>
                <select id="PendingOnly" name="PendingOnly" class="form-select" aria-label="Show Only">
                    <option value="">All Jobs</option>
                    <option value="true" selected="@(Model.PendingOnly ? "selected" : null)">Pending</option>
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label" for="AssignedOrDispatchedOnly">Show Only</label>
                <select id="AssignedOrDispatchedOnly" name="AssignedOrDispatchedOnly" class="form-select" aria-label="Show Only Assigned/Dispatched">
                    <option value="">All</option>
                    <option value="true" selected="@(Model.AssignedOrDispatchedOnly ? "selected" : null)">Assigned/Dispatched</option>
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label" for="FilterZone">Zone</label>
                <select id="FilterZone" name="FilterZone" class="form-select" aria-label="Zone">
                    <option value="">All Zones</option>
                    @foreach (var zone in safeServiceZones)
                    {
                        <option value="@zone" selected="@(Model.FilterZone == zone ? "selected" : null)">@zone</option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label" for="FilterServiceType">Service Type</label>
                <select id="FilterServiceType" name="FilterServiceType" class="form-select" aria-label="Service Type">
                    <option value="">All Types</option>
                    <option value="Plumbing" selected="@(Model.FilterServiceType == "Plumbing" ? "selected" : null)">Plumbing</option>
                    <option value="HVAC" selected="@(Model.FilterServiceType == "HVAC" ? "selected" : null)">HVAC</option>
                    <option value="Water" selected="@(Model.FilterServiceType == "Water" ? "selected" : null)">Water</option>
                </select>
            </div>
            <!-- Skill Tag Multi-Select Filter -->
            <div class="col-md-3">
                <label class="form-label" for="SkillTags">Skill Tags</label>
                <select id="SkillTags" name="SkillTags" multiple class="form-control" aria-label="Skill Tags">
                    @Html.Raw(Model.SkillTagOptionsHtml)
                </select>
                <div class="form-text">Hold Ctrl (Windows) or Cmd (Mac) to select multiple.</div>
            </div>
            <div class="col-md-3">
                <label class="form-label" for="SearchTerm">Search</label>
                <input type="text" id="SearchTerm" name="SearchTerm" class="form-control" value="@Model.SearchTerm" placeholder="Customer Name or Job ID" aria-label="Search" />
            </div>
            <div class="col-md-1 d-grid">
                <button type="submit" class="btn btn-primary mt-2" aria-label="Apply Filter" style="min-height:44px;">Filter</button>
            </div>
        </form>
    </div>
</div>
<!-- End Sprint 33.3 - Dispatcher Smart Filters -->
@* --- Live Diagnostics Panel --- *@
<div class="row mb-3">
    <div class="col-md-12">
        <div class="card shadow-sm mb-3">
            <div class="card-body py-2 px-4">
                <div class="row text-center">
                    <div class="col-md-3 mb-2">
                        <span class="fw-bold">Live Technician Pings</span><br />
                        <span class="text-success">@techHeartbeats.Count(t => t.IsOnline)</span> / <span class="text-muted">@techHeartbeats.Count()</span>
                    </div>
                    <div class="col-md-3 mb-2">
                        <span class="fw-bold">Jobs Delayed &gt; 30 min</span><br />
                        <span class="text-danger">@filteredRequests.Count(r => r.DelayMinutes > 30)</span>
                    </div>
                    <div class="col-md-3 mb-2">
                        <span class="fw-bold">System Health</span><br />
                        <span class="badge bg-success">OK</span>
                    </div>
                    <div class="col-md-3 mb-2">
                        <span class="fw-bold">Active Zones</span><br />
                        <span class="text-info">@string.Join(", ", safeServiceZones)</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@* --- Smart Dispatcher Filter Panel --- *@
<form method="post" asp-page-handler="ApplyFilters" class="mb-4">
    <div class="row g-2 align-items-end">
        <div class="col-md-2">
            <label class="form-label">Service Type</label>
            <select name="ServiceType" class="form-select">
                <option value="">All</option>
                <option value="Plumbing">Plumbing</option>
                <option value="Heating">Heating</option>
            </select>
        </div>
        <div class="col-md-2">
            <label class="form-label">Zone</label>
            <select name="Zone" class="form-select">
                <option value="">All</option>
                @foreach (var zone in safeServiceZones)
                {
                    <option value="@zone">@zone</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <label class="form-label">Technician</label>
            <partial name="_TechnicianDropdown" model="Model.TechnicianDropdownViewModel" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Workload</label>
            <select name="Workload" class="form-select">
                @foreach (var wl in workloads)
                {
                    <option value="@wl">@wl</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <label class="form-label">Status</label>
            <select name="Status" class="form-select">
                <option value="">All</option>
                <option value="Open">Open</option>
                <option value="Assigned">Assigned</option>
                <option value="Delayed">Delayed</option>
                <option value="Follow-up">Follow-up</option>
            </select>
        </div>
        <div class="col-md-2">
            <label class="form-label">Sort By</label>
            <select name="SortBy" class="form-select">
                <option value="">Default</option>
                <option value="Oldest">Oldest First</option>
                <option value="MostDelayed">Most Delayed</option>
                <option value="ZIP">ZIP</option>
            </select>
        </div>
        <div class="col-md-2">
            <button class="btn btn-primary mt-2">Apply Filters</button>
        </div>
    </div>
</form>
@* --- Filtered Request Panel --- *@
@if (filteredRequests.Any())
{
    <div class="row mb-4">
        <div class="col-12">
            <h4>Filtered Requests</h4>
            <table class="table table-bordered table-hover">
                <thead class="table-light">
                    <tr>
                        <th>ID</th>
                        <th>Service Type</th>
                        <th>Technician</th>
                        <th>Status</th>
                        <th>Priority</th>
                        <th>ZIP</th>
                        <th>Delay (min)</th>
                        <th>Predictive Hint</th>
                        <th>Override?</th>
                        <th>Reassign</th>
                        <th>Emergency</th>
                        <th>Actions</th>
                        <th>Optimizer</th>
                        <th>AI Routing Feedback</th>
                        <th>Compliance</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var req in filteredRequests)
                {
                    var emergencyClass = req.IsEmergency ? "border border-danger" : "";
                    // Predictive dispatch hint logic
                    var aiSuggestions = Model.OptimizedSuggestions != null && Model.OptimizedSuggestions.ContainsKey(req.Id) ? Model.OptimizedSuggestions[req.Id] : null;
                    string aiTechName = "-";
                    string aiScore = "-";
                    if (aiSuggestions != null)
                    {
                        foreach (var s in aiSuggestions)
                        {
                            if (!s.IsFallback && s.Technician != null)
                            {
                                aiTechName = s.Technician.Name ?? "-";
                                aiScore = s.Score.ToString("F0");
                                break;
                            }
                        }
                    }
                    var assignedTech = req.Technician ?? "-";
                    bool isOverride = !string.IsNullOrEmpty(aiTechName) && aiTechName != "-" && !string.Equals(aiTechName, assignedTech, StringComparison.OrdinalIgnoreCase);
                    <tr class="@emergencyClass">
                        <td>@req.Id @if (req.IsEmergency) { <span title="Emergency" class="text-danger fw-bold">??</span> }</td>
                        <td>@req.ServiceType</td>
                        <td>@assignedTech</td>
                        <td>@req.Status</td>
                        <td>@req.Priority</td>
                        <td>@req.Zip</td>
                        <td>@req.DelayMinutes</td>
                        <td>
                            <span title="AI-suggested technician and score">
                                <strong>@aiTechName</strong> <span class="text-muted">(@aiScore)</span>
                            </span>
                        </td>
                        <td>
                            @if (isOverride)
                            {
                                <span class="badge bg-warning text-dark">Override</span>
                            }
                            else if (!string.IsNullOrEmpty(aiTechName) && aiTechName == assignedTech)
                            {
                                <span class="badge bg-success">Match</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">-</span>
                            }
                        </td>
                        <td>
                            @if (User.IsInRole("Dispatcher") || User.IsInRole("Supervisor")) {
                            <form method="post" asp-page-handler="ReassignTech" style="display:inline;">
                                <input type="hidden" name="requestId" value="@req.Id" />
                                @{
                                    var skillTagMasterList = new[] { "Plumbing", "Air Conditioning", "Heating", "Water Filtration", "Trainee", "Mentor" };
                                    string requiredSkill = req.ServiceType ?? "";
                                    string jobZip = req.Zip ?? "";
                                    var suggestedTechs = Model.TechnicianStatuses.AsEnumerable().Where(t => t.Status == requiredSkill && t.Name != null).ToList();
                                }
                                <select name="newTechnicianId" class="form-select form-select-sm d-inline-block w-auto me-1">
                                    @if (suggestedTechs != null && suggestedTechs.Any())
                                    {
                                        @foreach (var tech in suggestedTechs)
                                        {
                                            <option value="@tech.TechnicianId">@tech.Name</option>
                                        }
                                    }
                                    else
                                    {
                                        <option disabled>No matching techs — show all</option>
                                        @foreach (var tech in Model.TechnicianStatuses)
                                        {
                                            <option value="@tech.TechnicianId">@tech.Name</option>
                                        }
                                    }
                                </select>
                                <button type="submit" class="btn btn-outline-primary btn-sm">Reassign</button>
                            </form>
                            }
                        </td>
                        <td>
                            @if (User.IsInRole("Supervisor")) {
                            <form method="post" asp-page-handler="FlagEmergency" style="display:inline;">
                                <input type="hidden" name="requestId" value="@req.Id" />
                                <button type="submit" class="btn btn-danger btn-sm">?? Emergency</button>
                            </form>
                            }
                        </td>
                        <td>
                            <a href="/Admin/RequestMessages?requestId=@req.Id" class="btn btn-outline-secondary btn-sm">?? Messages</a>
                            <a href="/Admin/DispatcherHistory?requestId=@req.Id" class="btn btn-outline-info btn-sm">View Timeline</a>
                            <a href="/Admin/UploadMedia?requestId=@req.Id" class="btn btn-outline-primary btn-sm">?? Upload Media</a>
                            <a href="/Admin/ViewMedia?requestId=@req.Id" class="btn btn-outline-secondary btn-sm">?? View Media Vault</a>
                            <!-- Sprint 32 - Admin Reschedule Logic -->
                            <button type="button" class="btn btn-warning btn-sm" data-bs-toggle="modal" data-bs-target="#rescheduleModal" data-job-id="@req.Id" data-tech="@req.Technician">Reschedule</button>
                            <button type="button" class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#escalateModal-@req.Id" title="Escalate Job">?? Escalate</button>
                        </td>
                        <td>
                            @if (Model.OptimizedSuggestions != null && Model.OptimizedSuggestions.ContainsKey(req.Id))
                            {
                                var suggestions = Model.OptimizedSuggestions[req.Id];
                                var fallback = Model.OptimizerFallbackReasons != null && Model.OptimizerFallbackReasons.ContainsKey(req.Id) ? Model.OptimizerFallbackReasons[req.Id] : null;
                                <div>
                                    <strong>Top Suggestions:</strong>
                                    <ul class="mb-1 ps-3">
                                    @foreach (var s in suggestions.Take(3))
                                    {
                                        <li>@s.Technician.Name (@s.Score.ToString("F0")) @(s.IsFallback ? "[Fallback]" : "")</li>
                                    }
                                    </ul>
                                    @if (!string.IsNullOrEmpty(fallback))
                                    {
                                        <span class="text-danger small">Fallback: @fallback</span>
                                    }
                                </div>
                            }
                            else
                            {
                                <span class="text-muted">No data</span>
                            }
                        </td>
                        <td>
                            <!-- AI Routing Feedback Panel -->
                            <button class="btn btn-outline-info btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#ai-feedback-@req.Id" aria-expanded="false" aria-controls="ai-feedback-@req.Id">AI Feedback</button>
                            <div class="collapse mt-2" id="ai-feedback-@req.Id">
                                <div class="card card-body p-2">
                                    <strong>Technician Scores:</strong>
                                    <ul class="mb-1 ps-3">
                                        @if (aiSuggestions != null)
                                        {
                                            foreach (var s in aiSuggestions.Take(5))
                                            {
                                                <li>@s.Technician.Name: <span class="fw-bold">@s.Score.ToString("F0")</span> @(s.IsFallback ? "[Fallback]" : "")</li>
                                            }
                                        }
                                        else
                                        {
                                            <li>No data</li>
                                        }
                                    </ul>
                                    <strong>Zone Density:</strong>
                                    <div>Jobs in zone: @(Model.ZoneLoadStatuses?.FirstOrDefault(z => z.Zone == req.Zip)?.JobCount ?? 0)</div>
                                    <strong>SLA Weighting:</strong>
                                    <div>
                                        @if (aiSuggestions != null && aiSuggestions.Any())
                                        {
                                            var firstSuggestion = aiSuggestions.FirstOrDefault();
                                            var slaScore = firstSuggestion.Score;
                                            <span>SLA impact: @(slaScore >= 100 ? "High" : slaScore >= 80 ? "Medium" : "Low") (@slaScore)</span>
                                        }
                                        else
                                        {
                                            <span>Unknown</span>
                                        }
                                    </div>
                                    <strong>Override Justification:</strong>
                                    <div>
                                        @if (Model.OptimizerFallbackReasons != null && Model.OptimizerFallbackReasons.ContainsKey(req.Id))
                                        {
                                            <span>@Model.OptimizerFallbackReasons[req.Id]</span>
                                        }
                                        else
                                        {
                                            <span>None</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
}
@* --- End Filtered Request Panel --- *@
<div class="row mb-3">
    <div class="col-md-9">
        <form method="get" class="mb-0">
            <div class="row g-2 align-items-end">
                <div class="col-md-2">
                    <label class="form-label">SLA Filter</label>
                    <select name="SlaFilter" class="form-select" onchange="this.form.submit()">
                        @if (string.IsNullOrEmpty(Model.SlaFilter)) {
                            <option value="" selected>All Jobs</option>
                        } else {
                            <option value="">All Jobs</option>
                        }
                        @if (Model.SlaFilter == "overdue") {
                            <option value="overdue" selected>Overdue</option>
                        } else {
                            <option value="overdue">Overdue</option>
                        }
                        @if (Model.SlaFilter == "today") {
                            <option value="today" selected>Due Today</option>
                        } else {
                            <option value="today">Due Today</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="serviceType" class="form-label">Service Type</label>
                    <select id="serviceType" name="FilterServiceType" class="form-select" onchange="this.form.submit()">
                        @if (string.IsNullOrEmpty(Model.FilterServiceType)) {
                            <option value="" selected>All</option>
                        } else {
                            <option value="">All</option>
                        }
                        @foreach (var type in Model.ServiceTypes)
                        {
                            if (Model.FilterServiceType == type) {
                                <option value="@type" selected>@type</option>
                            } else {
                                <option value="@type">@type</option>
                            }
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="since" class="form-label">Submitted Since</label>
                    <input type="date" id="since" name="FilterSinceString" class="form-control" value="@Model.FilterSinceString" onchange="this.form.submit()" />
                </div>
                <div class="col-md-3">
                    <label for="sortBy" class="form-label">Sort By</label>
                    <select id="sortBy" name="SortBy" class="form-select" onchange="this.form.submit()">
                        @if (Model.SortBy == "priority") {
                            <option value="priority" selected>Priority</option>
                        } else {
                            <option value="priority">Priority</option>
                        }
                        @if (Model.SortBy == "service") {
                            <option value="service" selected>Service Type</option>
                        } else {
                            <option value="service">Service Type</option>
                        }
                        @if (Model.SortBy == "time") {
                            <option value="time" selected>Submission Time</option>
                        } else {
                            <option value="time">Submission Time</option>
                        }
                    </select>
                </div>
            </div>
        </form>
    </div>
    <div class="col-md-3">
        <div class="card border-danger sla-alerts-panel mb-3">
            <div class="card-header bg-danger text-white py-2 px-3"><strong>Escalated Jobs</strong></div>
            <div class="card-body p-2">
                <ul class="list-unstyled mb-0" id="escalated-jobs-list">
                    @foreach (var job in (Model.Requests?.AsEnumerable().Where(r => r.IsEscalated).OrderByDescending(r => r.EscalatedAt) ?? Enumerable.Empty<ServiceRequest>()))
                    {
                        <li class="mb-1"><span class="badge bg-danger">Escalated</span> <span class="ms-1">#@job.Id @job.CustomerName</span></li>
                    }
                </ul>
            </div>
        </div>
        <div class="card border-warning sla-alerts-panel">
            <div class="card-header bg-warning text-dark py-2 px-3"><strong>Upcoming SLA Alerts</strong></div>
            <div class="card-body p-2">
                <ul class="list-unstyled mb-0" id="sla-alerts-list">
                    @foreach (var job in (Model.Requests?.AsEnumerable().Where(r => r.DueDate.HasValue && r.DueDate.Value > DateTime.UtcNow && (r.DueDate.Value - DateTime.UtcNow).TotalHours < 2).OrderBy(r => r.DueDate) ?? Enumerable.Empty<ServiceRequest>()))
                    {
                        if (job.DueDate.HasValue)
                        {
                            <li class="mb-1"><span class="badge bg-warning text-dark">Due @job.DueDate.Value.ToLocalTime():t</span> <span class="ms-1">#@job.Id @job.CustomerName</span></li>
                        }
                    }
                </ul>
            </div>
        </div>
    </div>
</div>
<div class="mb-5" id="kanban-analytics">
    <h4>Kanban Analytics</h4>
    <div class="row g-3">
        <div class="col-md-4">
            <canvas id="kanbanStatusChart" height="180"></canvas>
        </div>
        <div class="col-md-4">
            <canvas id="kanbanPriorityChart" height="180"></canvas>
        </div>
        <div class="col-md-4">
            <div class="card p-3">
                <h6 class="mb-2">Job Stats</h6>
                <ul class="list-unstyled mb-0">
                    <li><strong>Total:</strong> <span id="stat-total">@Model.Requests?.Count ?? 0</span></li>
                    <li><strong>Unassigned:</strong> <span id="stat-unassigned">@Model.Requests?.Count(r => (Model.TechnicianStatuses?.FirstOrDefault(ts => ts.TechnicianId == r.AssignedTechnicianId)?.Status ?? "Unassigned") == "Unassigned") ?? 0</span></li>
                    <li><strong>Assigned:</strong> <span id="stat-assigned">@Model.Requests?.Count(r => (Model.TechnicianStatuses?.FirstOrDefault(ts => ts.TechnicianId == r.AssignedTechnicianId)?.Status ?? "Unassigned") == "Assigned") ?? 0</span></li>
                    <li><strong>En Route:</strong> <span id="stat-enroute">@Model.Requests?.Count(r => (Model.TechnicianStatuses?.FirstOrDefault(ts => ts.TechnicianId == r.AssignedTechnicianId)?.Status ?? "Unassigned") == "En Route") ?? 0</span></li>
                    <li><strong>Complete:</strong> <span id="stat-complete">@Model.Requests?.Count(r => (Model.TechnicianStatuses?.FirstOrDefault(ts => ts.TechnicianId == r.AssignedTechnicianId)?.Status ?? "Unassigned") == "Complete") ?? 0</span></li>
                    <li><strong>High Priority:</strong> <span id="stat-high">@Model.Requests?.Count(r => r.Priority == "High") ?? 0</span></li>
                    <li><strong>Normal Priority:</strong> <span id="stat-normal">@Model.Requests?.Count(r => r.Priority == "Normal") ?? 0</span></li>
                    <li><strong>Low Priority:</strong> <span id="stat-low">@Model.Requests?.Count(r => r.Priority == "Low") ?? 0</span></li>
                </ul>
            </div>
        </div>
    </div>
</div>
@* Sprint 33.3 - Zone Map View *@
@await Html.PartialAsync("_ZoneMap")
@* End Sprint 33.3 - Zone Map View *@
<ul class="nav nav-tabs mb-3" id="kanbanTabs">
    @foreach (var status in statuses)
    {
        <li class="nav-item">
            <a class="nav-link @(activeTab == status ? "active" : "")" href="?tab=@status">@status</a>
        </li>
    }
</ul>
<form id="reorderForm" method="post" asp-page-handler="Reorder" style="display:none;">
    <input type="hidden" name="OrderJson" id="orderJson" />
</form>
@await Html.PartialAsync("_TechnicianLoadPanel", Model.TechnicianLoads)
@* --- Kanban Board --- *@
<div class="row kanban-board grid grid-cols-1 md:grid-cols-4" id="kanbanBoard" role="region" aria-label="Kanban Board">
    @foreach (var status in statuses)
    {
        <div class="col kanban-column" role="region" aria-label="@status Column">
            <div class="kanban-column-header bg-light p-2 mb-2 border rounded"><strong>@status</strong></div>
            <div class="kanban-cards" id="kanban-@status" data-status="@status" style="min-height: 200px;">
                @foreach (var req in Model.Requests?.Where(r => Model.TechnicianStatuses != null && Model.TechnicianStatuses.Any() && Model.TechnicianStatuses.FirstOrDefault(ts => ts.TechnicianId == r.AssignedTechnicianId)?.Status == status) ?? Enumerable.Empty<ServiceRequest>())
                {
                    <div class="draggable-job card mb-2" draggable="true" data-job-id="@req.Id" tabindex="0" aria-label="Job Card @req.Id" style="min-height:44px;">
                        @await Html.PartialAsync("_JobCard", req)
                        @if (string.IsNullOrEmpty(req.AssignedTechnicianId?.ToString()) && status == "Unassigned")
                        {
                            if (Model.SuggestedTech != null && Model.SuggestedTech.ContainsKey(req.Id))
                            {
                                var suggestion = Model.SuggestedTech[req.Id];
                                <div class="suggested-tech mt-2" aria-label="Suggested Technician">
                                    <strong>Suggested:</strong> @suggestion.TechName 
                                    (<span class="text-muted">@suggestion.Confidence %</span>)
                                </div>
                            }
                            <form method="post" asp-page-handler="AutoAssign" asp-route-requestId="@req.Id" class="mt-1" role="form" aria-label="Auto Assign Technician">
                                <button class="btn btn-warning btn-sm" style="min-height:44px;" aria-label="Auto Assign">Auto Assign</button>
                                @Html.AntiForgeryToken()
                            </form>
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>
@if (Model.Requests != null && !Model.Requests.Any())
{
    <div class="alert alert-info mt-4">No service requests found for the selected filters.</div>
}
<hr class="my-5" />
<h4>Kanban Job Movement History</h4>
<form method="get" class="row g-2 mb-3 align-items-end">
    <div class="col-md-2">
        <label class="form-label">From Status</label>
        <select name="HistoryFromStatus" class="form-select" onchange="this.form.submit()">
            <option value="">All</option>
            @foreach (var s in statuses) {
                if (Model.HistoryFromStatus == s) {
                    <option value="@s" selected>@s</option>
                } else {
                    <option value="@s">@s</option>
                }
            }
        </select>
    </div>
    <div class="col-md-2">
        <label class="form-label">To Status</label>
        <select name="HistoryToStatus" class="form-select" onchange="this.form.submit()">
            <option value="">All</option>
            @foreach (var s in statuses) {
                if (Model.HistoryToStatus == s) {
                    <option value="@s" selected>@s</option>
                } else {
                    <option value="@s">@s</option>
                }
            }
        </select>
    </div>
    <div class="col-md-2">
        <label class="form-label">User</label>
        <input type="text" name="HistoryUser" class="form-control" value="@Model.HistoryUser" placeholder="User..." onchange="this.form.submit()" />
    </div>
    <div class="col-md-2">
        <label class="form-label">From Date</label>
        <input type="date" name="HistoryFromDate" class="form-control" value="@Model.HistoryFromDateString" onchange="this.form.submit()" />
    </div>
    <div class="col-md-2">
        <label class="form-label">To Date</label>
        <input type="date" name="HistoryToDate" class="form-control" value="@Model.HistoryToDateString" onchange="this.form.submit()" />
    </div>
    <div class="col-md-2 text-end">
        <button type="submit" name="export" value="csv" class="btn btn-outline-secondary me-2">Export CSV</button>
        <button type="submit" name="export" value="excel" class="btn btn-outline-success">Export Excel</button>
    </div>
</form>
<div class="table-responsive">
    <table class="table table-sm table-bordered align-middle">
        <thead class="table-light">
            <tr>
                <th>Time</th>
                <th>Job ID</th>
                <th>From</th>
                <th>To</th>
                <th>To Index</th>
                <th>User</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var log in Model.KanbanHistory)
            {
                <tr>
                    <td>@log.ChangedAt.ToLocalTime().ToString("g")</td>
                    <td>@log.ServiceRequestId</td>
                    <td>@log.FromStatus</td>
                    <td>@log.ToStatus</td>
                    <td>@log.ToIndex</td>
                    <td>@log.ChangedBy</td>
                </tr>
            }
        </tbody>
    </table>
</div>
@await Html.PartialAsync("DispatcherMapModal")
@await Html.PartialAsync("EscalationModal")
@await Html.PartialAsync("_TechnicianProfileModal")
<div id="techProfileModalContainer"></div>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.css" />
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
<link rel="stylesheet" href="/css/DispatcherQueueAnimations.css" />
<script src="/js/DispatcherQueueAnimations.js"></script>
<script>
// Sprint 47.4 Patch Log: Dispatch queue animation and ETA adjustments.
// FixItFred: Sprint 30D.1 - Live ETA SignalR client binding
let etaConnection = new signalR.HubConnectionBuilder()
    .withUrl("/etahub?zone=" + encodeURIComponent('@(safeServiceZones.FirstOrDefault() ?? "1")'))
    .build();

// Add transition/animation for job movement
function animateJobMovement(jobId, fromStatus, toStatus) {
    const jobEl = document.querySelector(`[data-job-id='${jobId}']`);
    if (!jobEl) return;
    jobEl.classList.add('job-moving');
    setTimeout(() => {
        jobEl.classList.remove('job-moving');
        jobEl.classList.add('job-arrived');
        setTimeout(() => jobEl.classList.remove('job-arrived'), 1200);
    }, 800);
}

// Listen for SignalR ETA updates and animate ETA changes
etaConnection.on("ReceiveETA", function(zone, message) {
    let etaPanel = document.getElementById("live-eta-panel");
    if (!etaPanel) {
        etaPanel = document.createElement("div");
        etaPanel.id = "live-eta-panel";
        etaPanel.className = "alert alert-info mt-3";
        document.body.prepend(etaPanel);
    }
    etaPanel.innerHTML = `<strong>Live ETA Update (Zone ${zone}):</strong> ${message}`;
    // Animate ETA update for jobs in this zone
    document.querySelectorAll(`.draggable-job[data-zone='${zone}']`).forEach(el => {
        el.classList.add('eta-updated');
        setTimeout(() => el.classList.remove('eta-updated'), 1200);
    });
});

etaConnection.start().catch(function (err) {
    return console.error("SignalR connection error:", err.toString());
});

function renderKanbanCharts() {
    // Status chart
    var statusCounts = {
        Unassigned: parseInt(document.getElementById('stat-unassigned').textContent),
        Assigned: parseInt(document.getElementById('stat-assigned').textContent),
        'En Route': parseInt(document.getElementById('stat-enroute').textContent),
        Complete: parseInt(document.getElementById('stat-complete').textContent)
    };
    var ctxStatus = document.getElementById('kanbanStatusChart').getContext('2d');
    if (window.kanbanStatusChart) window.kanbanStatusChart.destroy();
    window.kanbanStatusChart = new Chart(ctxStatus, {
        type: 'doughnut',
        data: {
            labels: Object.keys(statusCounts),
            datasets: [{
                data: Object.values(statusCounts),
                backgroundColor: ['#adb5bd', '#0d6efd', '#0dcaf0', '#198754']
            }]
        },
        options: { plugins: { legend: { position: 'bottom' } } }
    });
    // Priority chart
    var priorityCounts = {
        High: parseInt(document.getElementById('stat-high').textContent),
        Normal: parseInt(document.getElementById('stat-normal').textContent),
        Low: parseInt(document.getElementById('stat-low').textContent)
    };
    var ctxPriority = document.getElementById('kanbanPriorityChart').getContext('2d');
    if (window.kanbanPriorityChart) window.kanbanPriorityChart.destroy();
    window.kanbanPriorityChart = new Chart(ctxPriority, {
        type: 'pie',
        data: {
            labels: Object.keys(priorityCounts),
            datasets: [{
                data: Object.values(priorityCounts),
                backgroundColor: ['#dc3545', '#6c757d', '#0dcaf0']
            }]
        },
        options: { plugins: { legend: { position: 'bottom' } } }
    });
}
document.addEventListener('DOMContentLoaded', function () {
    renderKanbanCharts();
    const statuses = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(statuses));
    statuses.forEach(function (status) {
        const el = document.getElementById('kanban-' + status);
        if (el) {
            new Sortable(el, {
                group: 'kanban',
                animation: 150,
                onEnd: function (evt) {
                    submitOrder();
                }
            });
        }
    });
    function submitOrder() {
        const order = {};
        statuses.forEach(function (status) {
            const col = document.getElementById('kanban-' + status);
            if (col) {
                order[status] = Array.from(col.querySelectorAll('[data-request-id]')).map(x => x.getAttribute('data-request-id'));
            }
        });
        document.getElementById('orderJson').value = JSON.stringify(order);
        document.getElementById('reorderForm').submit();
    }
});
@* Sprint 48.2 Patch Log: SuggestBestTech button & modal UI *@
<!-- SuggestBestTech Button and Modal -->
<div id="suggestBestTechModal" class="modal fade" tabindex="-1" aria-labelledby="suggestBestTechLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="suggestBestTechLabel">Smart Technician Suggestion</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="suggestBestTechBody">
        <div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>
<script>
function showSuggestBestTech(requestId) {
    var modal = new bootstrap.Modal(document.getElementById('suggestBestTechModal'));
    var body = document.getElementById('suggestBestTechBody');
    body.innerHTML = '<div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div>';
    fetch(`/api/dispatcher/suggest-best-tech?requestId=${requestId}`)
        .then(resp => resp.json())
        .then(data => {
            body.innerHTML = `<strong>Best Technician:</strong> ${data.technicianName}<br/><strong>Score:</strong> ${data.score}<br/><strong>Reason:</strong> ${data.reason}`;
        });
    modal.show();
}
// SignalR SLA warning animation
const slaConnection = new signalR.HubConnectionBuilder().withUrl("/hubs/requests").build();
slaConnection.on("ReceiveSLAWarning", function(data) {
    const jobEl = document.querySelector(`[data-job-id='${data.ServiceRequestId}']`);
    if (jobEl) {
        jobEl.classList.add('red-glow');
        setTimeout(() => jobEl.classList.remove('red-glow'), 3000);
    }
    // Optionally show notification
    if (window.Notification && Notification.permission === "granted") {
        new Notification("SLA Warning", { body: data.Message });
    }
});
slaConnection.start();
</script>
@* Add button to each job row *@
@functions{
    public string GetSuggestBestTechButton(int requestId) => $"<button type='button' class='btn btn-outline-danger btn-sm' onclick='showSuggestBestTech({requestId})'>SuggestBestTech</button>";
}
<!-- Add button to job actions column -->
@* In job table row, add: @Html.Raw(GetSuggestBestTechButton(req.Id)) *@
@* Sprint 54.0: Optimized Technician Suggestion Button & Route Preview *@
@* Add Optimized Technician Suggestion button to each job row *@
@functions{
    public string GetOptimizedTechButton(int requestId) => $"<button type='button' class='btn btn-outline-success btn-sm' onclick='showOptimizedTech({requestId})'>Optimized Tech</button>";
}
<script>
function showOptimizedTech(requestId) {
    var modal = new bootstrap.Modal(document.getElementById('suggestBestTechModal'));
    var body = document.getElementById('suggestBestTechBody');
    body.innerHTML = '<div class="spinner-border text-success" role="status"><span class="visually-hidden">Loading...</span></div>';
    fetch(`/api/dispatcher/optimized-tech?requestId=${requestId}`)
        .then(resp => resp.json())
        .then(data => {
            let html = `<strong>Top 3 Technicians:</strong><ul>`;
            data.topTechs.forEach(function(t) {
                html += `<li>${t.name} (ETA: ${t.eta}, RouteScore: ${t.routeScore})</li>`;
            });
            html += `</ul><strong>Preferred Technician:</strong> ${data.preferredTechName}<br/><strong>Route Preview:</strong> <span id='routePreview'></span>`;
            body.innerHTML = html;
            // Optionally trigger map route preview
            if (window.plotOptimizedRoute) window.plotOptimizedRoute(data.routeGeoJson);
        });
    modal.show();
}
</script>
@* Sprint 62.0 Patch Log: Dispatcher Load Monitor — Live zone heatmap, SLA saturation, congestion, and escalation display. *@
<div class="row mb-4">
    <div class="col-12">
        <h4>Dispatcher Zone Heatmap — Sprint 62.0</h4>
        <table class="table table-bordered heatmap-table">
            <thead class="table-light">
                <tr>
                    <th>Zone</th>
                    <th>Jobs</th>
                    <th>SLA Risk</th>
                    <th>Escalated</th>
                    <th>Congestion</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var zone in Model.ServiceZones)
                {
                    var status = Model.ZoneStressStatuses?.FirstOrDefault(zs => zs.Zone == zone);
                    string colorClass = status?.CongestionLevel switch
                    {
                        3 => "table-danger",
                        2 => "table-warning",
                        1 => "table-info",
                        _ => "table-success"
                    };
                    <tr class="@colorClass">
                        <td>@zone</td>
                        <td>@(status?.JobCount ?? 0)</td>
                        <td>@(status?.SlaRiskJobs ?? 0)</td>
                        <td>@(status?.EscalatedJobs ?? 0)</td>
                        <td>
                            @switch (status?.CongestionLevel)
                            {
                                case 3:
                                    <span class="badge bg-danger">Critical</span>
                                    break;
                                case 2:
                                    <span class="badge bg-warning text-dark">High</span>
                                    break;
                                case 1:
                                    <span class="badge bg-info text-dark">Moderate</span>
                                    break;
                                default:
                                    <span class="badge bg-success">Low</span>
                                    break;
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="mt-2">
            <strong>Live SmartQueue Stress Simulation:</strong>
            <pre>@Model.ZoneStressChartDataJson</pre>
        </div>
        <div class="alert alert-info mt-3">
            <strong>Sprint 62.0 Patch Log:</strong> Dispatcher Load Monitor launched. Real-time zone heatmap, SLA collision detection, auto-escalation, and SmartQueue congestion display are now active.
        </div>
    </div>
</div>
</main>
