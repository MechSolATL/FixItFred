@page
@model MVP_Core.Pages.Admin.DashboardModel
@inject global::Services.Dispatch.SlaDriftAnalyzerService SlaDriftAnalyzerService
@inject global::Services.Storage.StorageMonitorService StorageMonitorService
@inject MVP_Core.Services.Admin.ComplianceReportService ComplianceService
@inject MVP_Core.Services.Admin.SmartAdminAlertsService SmartAdminAlertsService
@inject MVP_Core.Data.ApplicationDbContext Db
@using MVP_Core.Services.Tenant
@inject TenantResolver TenantResolver
@{
    ViewData["Title"] = "Admin Dashboard";
    Layout = "~/Pages/Shared/_Layout.cshtml";
    // Sprint 83.4-TraceFix: Resolved CS8072 � Refactored expression tree to avoid ?. operator
    var onboarding = Db.OnboardingStagings.FirstOrDefault(o => o.UserId == (User != null && User.Identity != null ? User.Identity.Name : null));
    var userId = User?.Identity?.Name;
    var onboardingStatus = userId != null ? Db.UserOnboardingStatuses.FirstOrDefault(u => u.UserId.ToString() == userId) : null;
    var modules = TenantResolver.TenantModules;
}

<!-- Sprint 85.2 � Admin Metrics Dashboard Integration -->
@await Html.PartialAsync("/Pages/Shared/_MetricsCards.cshtml", Model.Metrics)
<!-- End Sprint 85.2 � Admin Metrics Dashboard Integration -->

<div class="container mt-5">
    <h1 class="text-center mb-4">?? Service Requests Dashboard</h1>

    <!-- Sprint 85.0 � Admin Drop Alert UI + Toast Integration -->
    <div class="mb-4">
        <h4>Recent TrustScore Drop Alerts
            @if (Model.DropAlertCount >= 3)
            {
                <span class="badge bg-danger ms-2" title="Multiple TrustScore drops"><i class="fas fa-exclamation-triangle"></i> @Model.DropAlertCount</span>
            }
        </h4>
        @if (Model.LatestDropAlerts.Any())
        {
            <div class="card shadow-sm mb-3">
                <div class="card-body p-2">
                    <table class="table table-sm table-bordered mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Technician</th>
                                <th>Drop ?</th>
                                <th>Previous ? Current</th>
                                <th>Triggered At</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var alert in Model.LatestDropAlerts)
                        {
                            var tech = Db.Technicians.FirstOrDefault(t => t.Id == alert.TechnicianId);
                            <tr>
                                <td>@(tech?.FullName ?? $"Tech #{alert.TechnicianId}")</td>
                                <td class="text-danger fw-bold">@(alert.PreviousScore - alert.CurrentScore)</td>
                                <td><span class="text-muted">@alert.PreviousScore</span> ? <span class="fw-bold">@alert.CurrentScore</span></td>
                                <td>@alert.TriggeredAt.ToLocalTime().ToString("g")</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-success">No TrustScore drops in the past 7 days.</div>
        }
    </div>
    <!-- End Sprint 85.0 � Admin Drop Alert UI + Toast Integration -->

    <!-- P.R.O.S. Certified Badge -->
    @if (onboarding != null && onboarding.IsVerified)
    {
        <div class="mb-3">
            <span class="badge bg-success" title="P.R.O.S. Certified since @onboarding.CreatedOn.ToShortDateString()">P.R.O.S. Certified since @onboarding.CreatedOn.ToShortDateString()</span>
        </div>
    }
    else if (onboardingStatus != null && onboardingStatus.IsProsCertified)
    {
        <div class="mb-3">
            <span class="badge bg-success" title="P.R.O.S. Certified since @onboardingStatus.CertifiedOn?.ToShortDateString()">? PROS Certified</span>
        </div>
    }
    else
    {
        <div class="mb-3">
            <span class="badge bg-danger" title="Certification required">Dispatch tools are locked until onboarding is verified.</span>
        </div>
    }

    <!-- Feedback Feature Request Button -->
    <div class="mb-3">
        <a href="/Admin/FeatureRequestCenter" class="btn btn-outline-primary">Submit Feature Request / Feedback</a>
    </div>

    <!-- SLA Drift Heatmap Widget -->
    <div class="mb-4">
        <h4>SLA Drift Heatmap <span class="badge bg-warning">Live</span></h4>
        <div>@Model.SlaHeatmap</div>
    </div>

    <!-- Storage Growth Chart + Compress Now Button -->
    <div class="mb-4">
        <h4>Storage Growth <span class="badge bg-info">Live</span></h4>
        <div>@Model.StorageChart</div>
        <form method="post">
            <button type="submit" class="btn btn-secondary" formaction="/Admin/CompressStorage">Compress Now</button>
        </form>
    </div>

    <!-- Compliance Report Export Buttons -->
    <div class="mb-4">
        <h4>Compliance Reports</h4>
        <form method="post">
            <button type="submit" class="btn btn-outline-primary me-2" formaction="/Admin/ExportCompliance?type=pdf">Export PDF</button>
            <button type="submit" class="btn btn-outline-success" formaction="/Admin/ExportCompliance?type=csv">Export CSV</button>
        </form>
    </div>

    <!-- SmartAdminAlerts Bar + Icon Stack -->
    <div class="mb-4">
        <h4>Smart Admin Alerts</h4>
        @if (Model.ActiveAlerts.Any())
        {
            <div class="alert alert-warning d-flex flex-column">
                @foreach (var alert in Model.ActiveAlerts)
                {
                    <div class="d-flex align-items-center mb-2">
                        <span class="me-2"><i class="fas fa-exclamation-triangle"></i></span>
                        <span class="me-2">[@alert.Severity] @alert.Message</span>
                        <form method="post" asp-page-handler="AcknowledgeAlert" class="d-inline">
                            <input type="hidden" name="alertId" value="@alert.Id" />
                            <input type="hidden" name="actionTaken" value="Acknowledge" />
                            <button type="submit" class="btn btn-sm btn-success me-1">Acknowledge</button>
                        </form>
                        <form method="post" asp-page-handler="AcknowledgeAlert" class="d-inline">
                            <input type="hidden" name="alertId" value="@alert.Id" />
                            <input type="hidden" name="actionTaken" value="Mute" />
                            <button type="submit" class="btn btn-sm btn-secondary">Mute</button>
                        </form>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="alert alert-success">No active alerts.</div>
        }
        <div class="d-flex flex-row align-items-center">
            <span class="me-2"><i class="fas fa-bell"></i></span>
            <span class="me-2"><i class="fas fa-bolt"></i></span>
            <span class="me-2"><i class="fas fa-shield-alt"></i></span>
            <!-- Sprint 85.0 � Admin Drop Alert UI + Toast Integration: TrustMap badge icon -->
            <a href="/Admin/TrustMap" class="ms-3 position-relative" title="TrustMap">
                <i class="fas fa-map-marked-alt fa-lg"></i>
                @if (Model.DropAlertCount >= 3)
                {
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">@Model.DropAlertCount</span>
                }
            </a>
        </div>
    </div>

    <!-- Escalation Alert Pill -->
    @if (Model.PendingEscalationCount > 0)
    {
        <div class="alert alert-danger d-flex align-items-center mb-3">
            <span class="me-2">??</span>
            <span><strong>@Model.PendingEscalationCount Tech Escalations Pending Review</strong></span>
        </div>
    }

    <!-- ?? Filters -->
    <div class="card mb-4 p-4 shadow-sm">
        <form method="get" class="row g-3 align-items-end">
            <div class="col-md-4">
                <label class="form-label">Filter by Service Type</label>
                <select name="ServiceType" class="form-select">
                    <option value="">All</option>
                    <option value="Plumbing">Plumbing</option>
                    <option value="Air Conditioning">Air Conditioning</option>
                    <option value="Water Filtration">Water Filtration</option>
                    <option value="Heating">Heating</option>
                </select>
            </div>
            <div class="col-md-4">
                <label class="form-label">Status</label>
                <select name="Status" class="form-select">
                    <option value="">All</option>
                    <option value="Pending">Pending</option>
                    <option value="Scheduled">Scheduled</option>
                    <option value="Completed">Completed</option>
                    <option value="Closed">Closed</option>
                </select>
            </div>
            <div class="col-md-4">
                <button type="submit" class="btn btn-primary w-100">?? Apply Filters</button>
            </div>
        </form>
    </div>

    <!-- ?? Requests Table -->
    <div class="table-responsive shadow-sm">
        <table class="table table-hover table-bordered align-middle">
            <thead class="table-dark text-center">
                <tr>
                    <th>Client</th>
                    <th>Service</th>
                    <th>Submitted</th>
                    <th>Status</th>
                    <th>Urgent</th>
                    <th>Needs Follow-Up</th>
                    <th>Phone</th>
                    <th>Email</th>
                    <th>Confirmed</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.ServiceRequests.Any())
                {
                    @foreach (var request in Model.ServiceRequests)
                    {
                        var urgentClass = request.IsUrgent ? "table-danger" : "";
                        var followUpClass = request.NeedsFollowUp ? "table-warning" : "";
                        var rowClass = $"{urgentClass} {followUpClass}".Trim();

                        <tr class="@rowClass">
                            <td>@request.CustomerName</td>
                            <td>@request.ServiceType</td>
                            <td>@request.CreatedAt.ToString("g")</td>
                            <td>
                                <span class="badge bg-@(request.Status == "Pending" ? "warning text-dark" : request.Status == "Scheduled" ? "info" : request.Status == "Completed" ? "success" : "secondary")">
                                    @request.Status
                                </span>
                            </td>
                            <td class="text-center">@(request.IsUrgent ? "??" : "-")</td>
                            <td class="text-center">@(request.NeedsFollowUp ? "??" : "-")</td>
                            <td>@request.Phone</td>
                            <td>@request.Email</td>
                            <td class="text-center">@(request.ClientConfirmedAt.HasValue ? "?" : "?")</td>
                            <td class="text-center">
                                <a href="/Admin/ViewRequest/@request.Id" class="btn btn-sm btn-primary mb-1">View</a><br />
                                @if (!request.ClientConfirmedAt.HasValue && request.Status != "Scheduled")
                                {
                                    <a href="/Admin/ConfirmRequest/@request.Id" class="btn btn-sm btn-warning mb-1">Confirm</a>

                                    <br />
                                }
                                @if (request.Status != "Closed")
                                {
                                    <a href="/Admin/CloseRequest/@request.Id" class="btn btn-sm btn-success">Close</a>
                                }
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="10" class="text-center text-muted p-4">
                            No service requests found.
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Feedback Spotlight Widget -->
    <div class="mb-3">
        <strong>Feedback Spotlight:</strong>
        <ul>
        @{
            var loyaltyDb = Model != null && Model.HttpContext != null ? Model.HttpContext.RequestServices.GetService(typeof(Data.ApplicationDbContext)) as Data.ApplicationDbContext : null;
            var reviews = loyaltyDb != null ? loyaltyDb.CustomerReviews.ToList() : new List<Data.Models.CustomerReview>();
            var spotlight = reviews.OrderByDescending(r => r.SentimentScore ?? 0).FirstOrDefault();
            if (spotlight != null)
            {
                <li><b>Review #@spotlight.Id</b>: @spotlight.Feedback <span class="badge bg-info">Sentiment: @spotlight.SentimentScore</span></li>
            }
        }
        </ul>
    </div>

    <!-- Sync Champion Spotlight Widget -->
    <div class="mb-3">
        @using MVP_Core.Services.Admin
        @using MVP_Core.Data.Models
        @inject SyncIncentiveEngine SyncIncentiveEngine
        @await Html.PartialAsync("_SyncChampionSpotlight")
    </div>

    <!-- Sprint 91.22.5 - Patch Badge Visuals: Current Patch Badge Holders tile -->
    <div class="mb-4">
        <h4>?? Current Patch Badge Holders <span class="badge bg-primary">This Week</span></h4>
        @if (Model.CurrentBadgeHolders.Any())
        {
            <div class="table-responsive">
                <table class="table table-bordered align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>Technician</th>
                            <th>Badge</th>
                            <th>Type</th>
                            <th>Date Earned</th>
                            <th>View</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var entry in Model.CurrentBadgeHolders)
                        {
                            <tr>
                                <td>@entry.TechName</td>
                                <td><img src="@entry.Badge.IconPath" alt="@entry.Badge.BadgeType" title="@entry.Badge.Description" style="width:40px;height:40px;" /></td>
                                <td>@entry.Badge.BadgeType</td>
                                <td>@entry.Badge.EarnedOn.ToShortDateString()</td>
                                <td><a href="/Technician/Profile/@entry.Badge.TechnicianId" class="btn btn-sm btn-outline-primary">View</a></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="alert alert-info">No badges awarded this week yet.</div>
        }
    </div>

    <div id="toastContainer" class="position-fixed top-0 end-0 p-3" style="z-index: 1080; max-width: 350px;"></div>
    <div id="notificationHistory" class="position-fixed top-0 end-0 mt-5 me-3 bg-white border rounded shadow-sm" style="width:350px; max-height:60vh; overflow-y:auto; display:none;"></div>
    <div class="d-flex justify-content-end mb-2">
      <button class="btn btn-sm btn-outline-secondary me-2" onclick="toggleNotificationHistory()">History</button>
      <button class="btn btn-sm btn-outline-warning me-2" onclick="toggleMute('Severe')">Mute Severe</button>
      <button class="btn btn-sm btn-outline-info me-2" onclick="toggleMute('Info')">Mute Info</button>
      <button class="btn btn-sm btn-outline-danger" onclick="toggleMute('Warning')">Mute Warning</button>
    </div>
</div>

@section Scripts {
    <script src="/js/dashboard-alerts.js"></script>
    <script>
        // Sprint 85.0 � Admin Drop Alert UI + Toast Integration
        window.latestDropAlerts = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.LatestDropAlerts.Select(a => new {
            technicianId = a.TechnicianId,
            previousScore = a.PreviousScore,
            currentScore = a.CurrentScore,
            triggeredAt = a.TriggeredAt
        })));
    </script>
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
<script>
let mutedTypes = {};
const notificationConnection = new signalR.HubConnectionBuilder()
    .withUrl("/notificationHub")
    .configureLogging(signalR.LogLevel.Information)
    .build();
function showToast(message, severity) {
    if (mutedTypes[severity]) return;
    var toastId = 'toast-' + Date.now();
    var toast = document.createElement('div');
    toast.className = 'toast align-items-center text-bg-' + (severity === 'Severe' ? 'danger' : severity === 'Info' ? 'info' : 'warning') + ' border-0 show';
    toast.id = toastId;
    toast.setAttribute('role', 'alert');
    toast.setAttribute('aria-live', 'assertive');
    toast.setAttribute('aria-atomic', 'true');
    toast.innerHTML = `<div class=\"d-flex\"><div class=\"toast-body\">${message}</div><button type=\"button\" class=\"btn-close me-2 m-auto\" data-bs-dismiss=\"toast\" aria-label=\"Close\" onclick=\"removeToast('${toastId}')\"></button></div>`;
    document.getElementById('toastContainer').appendChild(toast);
    setTimeout(function() { removeToast(toastId); addToHistory(message, severity); }, 6000);
}
function removeToast(id) {
    var toast = document.getElementById(id);
    if (toast) toast.remove();
}
function addToHistory(message, severity) {
    var history = document.getElementById('notificationHistory');
    var entry = document.createElement('div');
    entry.className = 'border-bottom p-2';
    entry.innerHTML = `<span class=\"badge bg-${severity === 'Severe' ? 'danger' : severity === 'Info' ? 'info' : 'warning'} me-2\">${severity}</span>${message}`;
    history.prepend(entry);
}
function toggleNotificationHistory() {
    var history = document.getElementById('notificationHistory');
    history.style.display = history.style.display === 'none' ? 'block' : 'none';
}
function toggleMute(type) {
    mutedTypes[type] = !mutedTypes[type];
}
notificationConnection.on("ReceiveNotification", function (message, severity) {
    showToast(message, severity);
});
async function startNotificationConnection() {
    try {
        await notificationConnection.start();
        console.log("SignalR NotificationHub connected.");
    } catch (err) {
        console.warn("SignalR NotificationHub connection failed. Retrying...", err);
        setTimeout(startNotificationConnection, 2000);
    }
}
notificationConnection.onclose(() => {
    startNotificationConnection();
});
startNotificationConnection();
</script>
