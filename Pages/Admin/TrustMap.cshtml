@page
@model MVP_Core.Pages.Admin.TrustMapModel
@inject MVP_Core.Services.Admin.TechnicianTrustAnalyticsService AnalyticsService
@{
    // Sprint 84.8 — TrustMap UI Scaffold
    Layout = "/Pages/Shared/_AdminLayout.cshtml";
    ViewData["Title"] = "Technician TrustMap & Heat Score";
    var heatScores = Model.HeatScores;
    var dropAlerts = Model.DropAlerts;
    var cityGroups = heatScores.GroupBy(h => h.City).OrderByDescending(g => g.Average(h => h.HeatScore));
    Func<int, string> heatColor = score => score >= 80 ? "#4caf50" : score >= 60 ? "#ffeb3b" : score >= 40 ? "#ff9800" : "#f44336";
}
<!-- Sprint 84.8 — Technician Heat Score + Map Overlay -->
<partial name="/Pages/Shared/_SEOHead.cshtml" />
<div class="container-fluid px-2 px-md-4 mt-4">
    <h2 class="mb-4 text-primary">Technician TrustMap & Heat Score</h2>
    <div class="mb-4">
        <h4>Recent Trust Score Drops <i class="fas fa-exclamation-triangle text-danger"></i></h4>
        @if (dropAlerts.Any())
        {
            <table class="table table-bordered table-sm">
                <thead><tr><th>Name</th><th>City</th><th>Zip</th><th>Previous</th><th>Current</th><th>Reason</th></tr></thead>
                <tbody>
                @foreach (var alert in dropAlerts)
                {
                    <tr class="table-danger">
                        <td>@alert.Name</td>
                        <td>@alert.City</td>
                        <td>@alert.ZipCode</td>
                        <td>@alert.PreviousScore</td>
                        <td><b>@alert.CurrentScore</b></td>
                        <td><span class="pulse-icon text-danger" title="Drop Alert"><i class="fas fa-exclamation-circle"></i> @alert.DropReason</span></td>
                    </tr>
                }
                </tbody>
            </table>
        }
        else
        {
            <div class="alert alert-success">No recent trust drops detected.</div>
        }
    </div>
    <div class="mb-4">
        <h4>Heat Score by City/Region</h4>
        @foreach (var group in cityGroups)
        {
            var avg = group.Average(h => h.HeatScore);
            <div class="mb-2 p-2 border rounded shadow-sm">
                <div class="d-flex align-items-center mb-1">
                    <span class="fw-bold me-2">@group.Key</span>
                    <span class="badge" style="background:@heatColor((int)avg);color:#222;">Avg: @((int)avg)</span>
                </div>
                <div class="d-flex flex-wrap gap-2">
                @foreach (var tech in group.OrderByDescending(t => t.HeatScore))
                {
                    <div class="card p-2 flex-grow-1" style="min-width:180px;max-width:220px;">
                        <div class="d-flex align-items-center mb-1">
                            <span class="fw-bold me-2">@tech.Name</span>
                            <span class="badge" style="background:@heatColor(tech.HeatScore);color:#222;">@tech.HeatScore</span>
                            @if (tech.HeatScore < 50)
                            {
                                <span class="pulse-icon text-danger ms-2" title="Low Trust"><i class="fas fa-exclamation-triangle"></i></span>
                            }
                        </div>
                        <div class="small text-muted">Zip: @tech.ZipCode</div>
                        <div class="progress mt-1" style="height:8px;">
                            <div class="progress-bar" role="progressbar" style="width:@tech.HeatScore%;background:@heatColor(tech.HeatScore);" aria-valuenow="@tech.HeatScore" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                    </div>
                }
                </div>
            </div>
        }
    </div>
    <div class="mb-4">
        <h4>GeoMap Overlay (Coming Soon)</h4>
        <div class="alert alert-info">GeoMapJS integration placeholder. Map overlay will visualize technician trust heat by region.</div>
    </div>
</div>
@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
    <style>
        .pulse-icon { animation: pulse 1.2s infinite alternate; }
        @keyframes pulse { 0% { opacity: 1; } 100% { opacity: 0.4; } }
    </style>
}
