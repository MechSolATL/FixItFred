@page
// FixItFred Patch Log — Sprint 26.4D
// [2025-07-25T00:00:00Z] — Added polling timer for live technician status/ETA refresh (SignalR-ready stub).
@model MVP_Core.Pages.Admin.SchedulerQueueModel
@using MVP_Core.Services.Dispatch
@inject MVP_Core.Services.Dispatch.NotificationDispatchEngine DispatchEngine
@{
    Layout = "/Pages/Shared/_AdminLayout.cshtml";
    ViewData["Title"] = "Scheduler Queue";
    var sortBy = Request.Query["sortBy"].ToString();
    var filterStatus = Request.Query["filterStatus"].ToString();
    var filteredQueue = Model.IntelligentQueue;
    if (!string.IsNullOrEmpty(filterStatus))
        filteredQueue = filteredQueue.Where(q => q.TechnicianStatus == filterStatus).ToList();
    if (sortBy == "eta")
        filteredQueue = filteredQueue.OrderBy(q => q.EstimatedArrival ?? DateTime.MaxValue).ToList();
    else if (sortBy == "tech")
        filteredQueue = filteredQueue.OrderBy(q => q.AssignedTechnicianName ?? "").ToList();
}
<head>
    @await Html.PartialAsync("/Pages/Shared/_SEOHead.cshtml")
</head>
<div class="container-fluid px-2 px-md-4 mt-4">
    <h2 class="mb-4 text-primary">Scheduler Queue</h2>
    <div id="confirmation-countdown" class="mb-2"></div>
    <partial name="_ValidationSummary" />
    @if (TempData["SystemMessages"] != null)
    {
        ViewData["AlertType"] = "info";
        ViewData["AlertMessage"] = TempData["SystemMessages"];
        <partial name="_Alert" />
    }
    <form method="get" class="row g-2 mb-3 align-items-end">
        <div class="col-md-3">
            <label class="form-label">Sort By</label>
            <select name="sortBy" class="form-select" onchange="this.form.submit()">
                @if (string.IsNullOrEmpty(sortBy)) {
                    <option value="" selected>Default</option>
                } else {
                    <option value="">Default</option>
                }
                @if (sortBy == "eta") {
                    <option value="eta" selected>ETA</option>
                } else {
                    <option value="eta">ETA</option>
                }
                @if (sortBy == "tech") {
                    <option value="tech" selected>Technician Name</option>
                } else {
                    <option value="tech">Technician Name</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <label class="form-label">Filter Status</label>
            <select name="filterStatus" class="form-select" onchange="this.form.submit()">
                @if (string.IsNullOrEmpty(filterStatus)) {
                    <option value="" selected>All</option>
                } else {
                    <option value="">All</option>
                }
                @if (filterStatus == "Available") {
                    <option value="Available" selected>Available</option>
                } else {
                    <option value="Available">Available</option>
                }
                @if (filterStatus == "Busy") {
                    <option value="Busy" selected>Busy</option>
                } else {
                    <option value="Busy">Busy</option>
                }
                @if (filterStatus == "Unavailable") {
                    <option value="Unavailable" selected>Unavailable</option>
                } else {
                    <option value="Unavailable">Unavailable</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <button type="submit" class="btn btn-outline-secondary">Apply</button>
        </div>
    </form>
    <form method="post" asp-page-handler="Reannotate" class="mb-3">
        <button type="submit" class="btn btn-warning">
            <i class="bi bi-arrow-repeat"></i> Re-annotate Technician Status & ETA
        </button>
    </form>
    @if (filteredQueue != null && filteredQueue.Any())
    {
        <div class="table-responsive">
            <table class="table table-hover table-bordered align-middle">
                <thead class="table-dark">
                    <tr>
                        <th>Technician Name</th>
                        <th>Status</th>
                        <th>Service Request</th>
                        <th>Scheduled For</th>
                        <th>ETA</th>
                        <th>SLA Window</th>
                        <th>Geo Distance (km)</th>
                        <th>Priority</th>
                        <th>Urgent</th>
                        <th>Emergency</th>
                        <th>Override</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in filteredQueue)
                    {
                        <tr>
                            <td>@item.AssignedTechnicianName ?? $"ID: {item.TechnicianId}"</td>
                            <td><span class="badge @(item.TechnicianStatus == "Available" ? "bg-success" : item.TechnicianStatus == "Busy" ? "bg-warning text-dark" : "bg-secondary")">@item.TechnicianStatus</span></td>
                            <td>@item.ServiceRequestId</td>
                            <td>@(item.ScheduledFor?.ToLocalTime().ToString("g") ?? "N/A")</td>
                            <td>
                                @if (item.EstimatedArrival.HasValue)
                                {
                                    <span class="fw-bold">@item.EstimatedArrival.Value.ToLocalTime().ToString("t")</span>
                                    <span class="small text-muted">(@((item.EstimatedArrival.Value - DateTime.UtcNow).TotalMinutes.ToString("0")) min)</span>
                                }
                                else
                                {
                                    <span class="text-muted">N/A</span>
                                }
                            </td>
                            <td>@(item.SLAWindowStart?.ToLocalTime().ToString("t") ?? "N/A") - @(item.SLAWindowEnd?.ToLocalTime().ToString("t") ?? "N/A")</td>
                            <td>@(item.GeoDistanceKm?.ToString("F1") ?? "N/A")</td>
                            <td>@item.ServiceTypePriority</td>
                            <td>@(item.IsUrgent ? "Yes" : "No")</td>
                            <td>@(item.IsEmergency ? "Yes" : "No")</td>
                            <td>@(item.DispatcherOverride ? $"Yes ({item.OverrideReason})" : "No")</td>
                            <td>
                                <form method="post" asp-page-handler="Notify" style="display:inline;">
                                    <input type="hidden" name="technicianId" value="@item.TechnicianId" />
                                    <input type="hidden" name="serviceRequestId" value="@item.ServiceRequestId" />
                                    <button type="submit" class="btn btn-sm btn-success">Notify</button>
                                </form>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-warning">No scheduled requests in queue.</div>
    }
</div>
@section Scripts {
    <script>
        // Polling timer for live technician status/ETA refresh (SignalR-ready stub)
        setInterval(function() {
            document.querySelector('form[asp-page-handler="Reannotate"]')?.submit();
        }, 30000); // 30s interval
        // Sprint 50.1: Confirmation countdown + urgency badge
        function updateCountdown() {
            var rows = document.querySelectorAll('tbody tr');
            rows.forEach(function(row) {
                var etaCell = row.querySelector('td:nth-child(5)');
                if (etaCell) {
                    var etaText = etaCell.textContent.trim();
                    var minMatch = etaText.match(/(\d+) min/);
                    if (minMatch) {
                        var mins = parseInt(minMatch[1]);
                        var badge = row.querySelector('.urgency-badge');
                        if (!badge) {
                            badge = document.createElement('span');
                            badge.className = 'urgency-badge ms-2 badge';
                            row.querySelector('td:nth-child(5)').appendChild(badge);
                        }
                        badge.textContent = mins <= 10 ? 'URGENT' : mins <= 30 ? 'Soon' : 'Normal';
                        badge.classList.toggle('bg-danger', mins <= 10);
                        badge.classList.toggle('bg-warning', mins > 10 && mins <= 30);
                        badge.classList.toggle('bg-success', mins > 30);
                    }
                }
            });
        }
        setInterval(updateCountdown, 10000); // Update every 10s
        updateCountdown();
        // Sprint 50.1: Dynamic status messages
        function updateStatusMessages() {
            var rows = document.querySelectorAll('tbody tr');
            rows.forEach(function(row) {
                var statusCell = row.querySelector('td:nth-child(2)');
                if (statusCell) {
                    var status = statusCell.textContent.trim();
                    var msgCell = row.querySelector('.dynamic-status-msg');
                    if (!msgCell) {
                        msgCell = document.createElement('td');
                        msgCell.className = 'dynamic-status-msg';
                        row.appendChild(msgCell);
                    }
                    if (status === 'Available') msgCell.textContent = "We're on it!";
                    else if (status === 'Busy') msgCell.textContent = "Waiting on tech...";
                    else if (status === 'Unavailable') msgCell.textContent = "Tech not assigned.";
                    else msgCell.textContent = "Status pending.";
                }
            });
        }
        setInterval(updateStatusMessages, 10000);
        updateStatusMessages();
    </script>
}
