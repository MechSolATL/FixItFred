// Sprint91_27 - Field Assessment Report Generator for Assessment → Estimate → Invoice flow
using Data.Models;
using System.Text;

namespace MVP_Core.Services
{
    public class FieldAssessmentReportService
    {
        private readonly ILogger<FieldAssessmentReportService> _logger;
        private readonly string _fieldReportsPath;

        public FieldAssessmentReportService(ILogger<FieldAssessmentReportService> logger)
        {
            _logger = logger;
            _fieldReportsPath = Path.Combine("Logs", "FieldReports");
            
            // Ensure directory exists
            if (!Directory.Exists(_fieldReportsPath))
            {
                Directory.CreateDirectory(_fieldReportsPath);
            }
        }

        /// <summary>
        /// Generate assessment report in markdown format for PDF export
        /// Sprint91_27 - Core flow: Assessment → Estimate → Invoice
        /// </summary>
        /// <param name="jobId">Job identifier</param>
        /// <returns>Markdown formatted assessment report</returns>
        public async Task<string> GenerateAssessmentReport(Guid jobId)
        {
            _logger.LogInformation($"Generating assessment report for job {jobId}");

            var reportBuilder = new StringBuilder();
            var timestamp = DateTime.UtcNow;

            // Header
            reportBuilder.AppendLine("# Field Assessment Report");
            reportBuilder.AppendLine();
            reportBuilder.AppendLine($"**Job ID:** {jobId}");
            reportBuilder.AppendLine($"**Report Generated:** {timestamp:yyyy-MM-dd HH:mm:ss} UTC");
            reportBuilder.AppendLine($"**Technician:** [To be filled]");
            reportBuilder.AppendLine();

            // Assessment sections
            reportBuilder.AppendLine("## Assessment Overview");
            reportBuilder.AppendLine();
            reportBuilder.AppendLine("### Systems Evaluated");
            reportBuilder.AppendLine("- [ ] Plumbing");
            reportBuilder.AppendLine("- [ ] HVAC");
            reportBuilder.AppendLine("- [ ] Electrical");
            reportBuilder.AppendLine("- [ ] Water Filtration");
            reportBuilder.AppendLine();

            // Sprint91_27 - Technician guidance sections
            reportBuilder.AppendLine("## Technician Guidance");
            reportBuilder.AppendLine();
            reportBuilder.AppendLine("### Safety Checks");
            reportBuilder.AppendLine("- [ ] Anti-microbial assessment (if ductwork flagged)");
            reportBuilder.AppendLine("- [ ] Crawlspace/pet risk evaluation");
            reportBuilder.AppendLine("- [ ] Line pressure test reminder (if pipe repair detected)");
            reportBuilder.AppendLine();

            reportBuilder.AppendLine("## Findings & Recommendations");
            reportBuilder.AppendLine();
            reportBuilder.AppendLine("### Critical Issues");
            reportBuilder.AppendLine("[Technician notes]");
            reportBuilder.AppendLine();

            reportBuilder.AppendLine("### Recommended Actions");
            reportBuilder.AppendLine("[Technician recommendations]");
            reportBuilder.AppendLine();

            reportBuilder.AppendLine("## Next Steps");
            reportBuilder.AppendLine("1. Generate estimate based on findings");
            reportBuilder.AppendLine("2. Present to customer for approval");
            reportBuilder.AppendLine("3. Convert to invoice upon acceptance");
            reportBuilder.AppendLine();

            reportBuilder.AppendLine("---");
            reportBuilder.AppendLine("*Report generated by MVP-Core Assessment System*");

            var markdown = reportBuilder.ToString();

            // Save to file
            var fileName = $"Assessment_{jobId}_{timestamp:yyyyMMdd_HHmmss}.md";
            var filePath = Path.Combine(_fieldReportsPath, fileName);
            
            await File.WriteAllTextAsync(filePath, markdown);
            _logger.LogInformation($"Assessment report saved to {filePath}");

            return markdown;
        }

        /// <summary>
        /// Export assessment report to PDF (placeholder for future implementation)
        /// </summary>
        public async Task<string> ExportToPdf(string markdown, Guid jobId)
        {
            // Sprint91_27 - Placeholder for PDF generation
            var fileName = $"Assessment_{jobId}_{DateTime.UtcNow:yyyyMMdd_HHmmss}.pdf";
            var filePath = Path.Combine(_fieldReportsPath, fileName);

            _logger.LogInformation($"PDF export requested for job {jobId} - saving placeholder");
            
            // TODO: Implement actual PDF generation from markdown
            await File.WriteAllTextAsync(filePath.Replace(".pdf", "_placeholder.txt"), 
                $"PDF Placeholder for Assessment Report\nJob ID: {jobId}\nGenerated: {DateTime.UtcNow}\n\n{markdown}");

            return filePath;
        }
    }
}